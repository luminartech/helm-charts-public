---
## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##

global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: ""
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.awsAccountId Default aws account id for crossplane aws provider resources. Quotes are important, value must be a string.
  ##
  awsAccountId: "0123456789"
  ## @param global.awsRegion Default aws region for crossplane aws provider resources.
  ##
  awsRegion: us-east-2
  ## @param global.providerConfigRef.name Default crossplane provider all resources generated for crossplane.
  ##
  providerConfigRef:
    name: crossplane-provider-config-aws
  ## @param global.awsDeletionPolicy Default crossplane deletion policy for all resources deployed by this helm chart..
  ## This can be overriden for each resource in its section
  awsDeletionPolicy: Orphan
  ## @param global.environment Environment name for the eks cluster
  ##
  environment: dev
  ## @param global.team Team name
  ##
  team: infra
  ## @param global.secretStoreRef External secrets secretstoreref
  ##
  secretStoreRef: "cluster-secret-store-aws"

## @skip StorageClass
##
StorageClass:
  enabled: false
  items:
    gp3-persistent-125:
      enabled: false
      name: gp3-persistent-125
      annotations:
        storageclass.kubernetes.io/is-default-class: "false"
      allowVolumeExpansion: true
      provisioner: kubernetes.io/aws-ebs
      reclaimPolicy: Retain
      volumeBindingMode: WaitForFirstConsumer
      parameters:
        type: gp3
        fsType: ext4
        throughput: "125"
        iops: "3000"
    gp3-ephemeral-125:
      enabled: false
      name: gp3-ephemeral-125
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
      allowVolumeExpansion: true
      provisioner: kubernetes.io/aws-ebs
      reclaimPolicy: Delete
      volumeBindingMode: WaitForFirstConsumer
      parameters:
        type: gp3
        fsType: ext4
        throughput: "125"
        iops: "3000"
    # efs:
    #   enabled: false
    #   annotations:
    #     storageclass.kubernetes.io/is-default-class: "false"
    #   provisioner: efs.csi.aws.com
    #   mountOptions:
    #     - tls
    #   parameters:
    #     provisioningMode: efs-ap # there's only one option
    #     fileSystemId: fs-07cfb21df0840f9b9
    #     directoryPerms: "700"
    #     gidRangeStart: "1000" # optional
    #     gidRangeEnd: "2000" # optional
    #     basePath: "/data" # optional

## @skip crossplane-aws-secretsmanager
##
crossplane-aws-secretsmanager:
  enabled: false
  Secret:
    enabled: false
    items:
      dockerhub-creds:
        name: '{{ .Values.global.team }}-{{ .Values.global.environment }}-dockerhub-creds'
        namespace: '{{ .Release.Namespace }}'
        annotations:
          crossplane.io/external-name: '{{ .Values.global.team }}-{{ .Values.global.environment }}/container-registry/dockerhub-creds'
        apiVersion: secretsmanager.aws.upbound.io/v1beta1
        forProvider:
          name: '{{ .Values.global.team }}-{{ .Values.global.environment }}/container-registry/dockerhub-creds'
          description: 'Dockerhub config secret for {{ .Values.global.team }}-{{ .Values.global.environment }}'
      github-argocd-secrets:
        name: '{{ .Values.global.team }}-{{ .Values.global.environment }}-gh-argocd'
        namespace: '{{ .Release.Namespace }}'
        annotations:
          crossplane.io/external-name: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/argocd'
        # Need to use upbound aws provider to create empty secrets
        apiVersion: secretsmanager.aws.upbound.io/v1beta1
        forProvider:
          name: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/argocd'
          description: "Argo CD secrets for github ci jobs"

## @skip external-secrets
##
external-secrets:
  enabled: false
  AWSExternalSecret:
    enabled: true
    items:
      dockerhub-creds:
        # Replicate docker creds to all namespaces
        annotations:
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: ""
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
          reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: ""
        name: '{{ .Values.global.team }}-{{ .Values.global.environment }}-dockerhub-creds'
        namespace: '{{ .Release.Namespace }}'
        target:
          template:
            type: kubernetes.io/dockerconfigjson
        source:
          secretStoreRef:
            name: '{{ .Values.global.secretStoreRef }}'
          data:
            .dockerconfigjson:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/container-registry/dockerhub-creds'
              awsSecretKey: '.dockerconfigjson'
              decodingStrategy: Base64
