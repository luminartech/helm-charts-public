---
## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##

global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: ""
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.awsAccountId Default aws account id for crossplane aws provider resources. Quotes are important, value must be a string.
  ##
  awsAccountId: "0123456789"
  ## @param global.awsBackupAccountId AWS Account where the DataBackups will be stored for all teams. Quotes are important, value must be a string.
  ##
  awsBackupAccountId: "0123456789"
  ## @param global.awsMgmtAccountId Management AWS account that runs the main mgmt cluster + argocd + crossplane.
  ## Crossplane and argocd IAM roles will be allowed to access this cluster and manage resources in the AWS account.
  ##
  awsMgmtAccountId: "0123456789"
  ## @param global.awsRegion Default aws region for crossplane aws provider resources.
  ##
  awsRegion: us-east-2
  ## @param global.providerConfigRef.name Default crossplane provider all resources generated for crossplane.
  ##
  providerConfigRef:
    name: crossplane-provider-config-aws
  ## @param global.awsDeletionPolicy Default crossplane deletion policy for all resources deployed by this helm chart..
  ## This can be overriden for each resource in its section
  awsDeletionPolicy: Orphan
  ## @param global.environment Environment name for the eks cluster
  ##
  environment: dev
  ## @param global.vpcFullname VPC to use for this EKS cluster
  ##
  vpcFullname: infra-aws-vpc
  ## @param global.argocdNamespace Target namespace for storing EKS secrets
  ## This is used by external secrets to generate cluster secret for ArgoCD
  ##
  argocdNamespace: "infra-argo-cd"
  ## @param global.argocdIAMRole Argo CD IAM role to grant cross account assume role permissions
  ##
  argocdIAMRole: "argo-cd"
  ## @param global.crossplaneNamespace Crossplane namespace for storing the EKS cluster config
  ##
  crossplaneNamespace: "infra-crossplane"
  ## @param global.crossplaneIAMRole Crossplane IAM Role
  ##
  crossplaneIAMRole: crossplane-provider-aws
  ## @param global.infraProviderConfigRefName AWS Provider config name of the infra mgmt crossplane instance
  ##
  infraProviderConfigRefName: crossplane-provider-aws
  ## @param global.eksVersion Default EKS Version to use
  ## https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html
  eksVersion: "1.29"
  ## @param global.eksNodeVersion EKS node version
  ## https://github.com/awslabs/amazon-eks-ami/blob/master/CHANGELOG.md
  eksNodeVersion: "1.29.0-20240227"
  ## @param global.teamAdminIAMRole Grant EKS admin permissions to this IAM Role
  ##
  teamAdminIAMRole: infra-admins

## @section Dependency: crossplane-aws-iam upstream helm chart parameters for creating EKS resources
## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-iam/values.yaml
##

crossplane-aws-iam:
  ## @param crossplane-aws-iam.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

  ## AWS resources parameters.
  ## items: Dict of one or more resources of its kind.
  ## @skip crossplane-aws-iam.RolePolicyAttachment
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  ##
  RolePolicyAttachment:
    items:
      cluster-role-cluster:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
      # Needed for Windows support
      cluster-role-vpc-resource-controller:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
      node-ecr-ro:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-eks-worker:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-eks-cni:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-eks-ssm-managed-instance:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-ebs-csi-driver:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'

  ## @skip crossplane-aws-iam.Role
  ##
  Role:
    items:
      cluster:
        forProvider:
          assumeRolePolicy:
            Version: '2012-10-17'
            Statement:
              allowAssumeRole:
                Effect: Allow
                Principal:
                  Service: eks.amazonaws.com
                Action: sts:AssumeRole
      node:
        forProvider:
          description: "EKS Managed Node group IAM Role"
          assumeRolePolicy:
            Version: '2012-10-17'
            Statement:
              allowAssumeRole:
                Effect: Allow
                Principal:
                  Service: ec2.amazonaws.com
                Action: sts:AssumeRole

## @section Dependency: crossplane-aws-ec2 upstream helm chart parameters for creating EKS resources
## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-ec2/values.yaml
##

crossplane-aws-ec2:
  ## @param crossplane-aws-ec2.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

  ## @skip crossplane-aws-ec2.SecurityGroup
  ##
  SecurityGroup:
    items:
      cluster:
        forProvider:
          description: "EKS cluster security group"
          name: '{{ include "common-gitops.names.release" . }}-cluster'
          vpcIdRef:
            name: '{{ .Values.global.vpcFullname }}'
      node:
        forProvider:
          description: "Node groups to cluster API"
          name: '{{ include "common-gitops.names.release" . }}-node'
          vpcIdRef:
            name: '{{ .Values.global.vpcFullname }}'

  ## @skip crossplane-aws-ec2.SecurityGroupRule
  ##
  SecurityGroupRule:
    items:
      cluster-to-node-in-443:
        forProvider:
          type: ingress
          protocol: tcp
          fromPort: 443
          toPort: 443
          description: "Node groups to cluster API"
          sourceSecurityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
            policy:
              resolution: Optional
              resolve: Always
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
      cluster-to-node-out-443:
        forProvider:
          type: egress
          protocol: tcp
          fromPort: 443
          toPort: 443
          description: "Node groups to cluster API"
          sourceSecurityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
            policy:
              resolution: Optional
              resolve: Always
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
      cluster-to-node-out-10250:
        forProvider:
          type: egress
          protocol: tcp
          fromPort: 10250
          toPort: 10250
          description: "Cluster API to node kubelets"
          sourceSecurityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
            policy:
              resolution: Optional
              resolve: Always
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
      node-to-cluster-in-443:
        forProvider:
          type: ingress
          protocol: tcp
          fromPort: 443
          toPort: 443
          description: "Cluster API to node groups"
          sourceSecurityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
            policy:
              resolution: Optional
              resolve: Always
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-to-cluster-in-10250:
        forProvider:
          type: ingress
          protocol: tcp
          fromPort: 10250
          toPort: 10250
          description: "Cluster API to node groups"
          sourceSecurityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
            policy:
              resolution: Optional
              resolve: Always
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-self-in-53-tcp:
        forProvider:
          type: ingress
          protocol: tcp
          fromPort: 53
          toPort: 53
          description: "DNS self TCP"
          self: true
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-self-in-53-udp:
        forProvider:
          type: ingress
          protocol: udp
          fromPort: 53
          toPort: 53
          description: "DNS self UDP"
          self: true
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-to-cluster-out-443:
        forProvider:
          type: egress
          protocol: tcp
          fromPort: 443
          toPort: 443
          description: "Node groups to cluster API"
          sourceSecurityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
            policy:
              resolution: Optional
              resolve: Always
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      # Separate rule because we might want to remove it in future
      node-to-any-out-443:
        forProvider:
          type: egress
          protocol: tcp
          fromPort: 443
          toPort: 443
          description: "Node groups to Any"
          cidrBlocks:
            - "0.0.0.0/0"
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-to-any-out-123-tcp:
        forProvider:
          type: egress
          protocol: tcp
          fromPort: 123
          toPort: 123
          description: "Node groups to Any"
          cidrBlocks:
            - "0.0.0.0/0"
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-to-any-out-123-udp:
        forProvider:
          type: egress
          protocol: udp
          fromPort: 123
          toPort: 123
          description: "Node groups to Any"
          cidrBlocks:
            - "0.0.0.0/0"
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-to-any-out-53-tcp:
        forProvider:
          type: egress
          protocol: tcp
          fromPort: 53
          toPort: 53
          description: "DNS Self TCP"
          self: true
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      node-to-any-out-53-udp:
        forProvider:
          type: egress
          protocol: udp
          fromPort: 53
          toPort: 53
          description: "DNS Self UDP"
          self: true
          securityGroupIdRef:
            name: '{{ include "common-gitops.names.release" . }}-node'

## @section Dependency: crossplane-aws-kms upstream helm chart parameters for creating EKS resources
## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-kms/values.yaml
##

crossplane-aws-kms:
  ## @param crossplane-aws-kms.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

  ## @skip crossplane-aws-kms.Key
  ##
  Key:
    items:
      cluster:
        forProvider:
          bypassPolicyLockoutSafetyCheck: false
          description: 'EKS cluster secret encryption key - {{ include "common-gitops.names.release" . }}'
          customerMasterKeySpec: SYMMETRIC_DEFAULT
          keyUsage: ENCRYPT_DECRYPT
          deletionWindowInDays: 30
          policy:
            Version: '2012-10-17'
            Statement:
              allowAllPrincipalAccess:
                Effect: Allow
                Action:
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:Encrypt
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:CreateGrant
                Resource: "*"
                Principal:
                  AWS:
                    - arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.crossplaneIAMRole }}
                Condition:
                  StringEquals:
                    kms:CallerAccount: "{{ .Values.global.awsAccountId }}"
                    kms:ViaService: eks.{{ .Values.global.awsRegion }}.amazonaws.com
              allowKeyMetaRootAccess:
                Effect: Allow
                Action:
                  - kms:RevokeGrant
                  - kms:List*
                  - kms:Get*
                  - kms:Describe*
                Resource: "*"
                Principal:
                  AWS:
                  - arn:aws:iam::{{ .Values.global.awsAccountId }}:root
              allowAdminKeyAccess:
                Effect: Allow
                Action: kms:*
                Resource: "*"
                Principal:
                  AWS:
                    - arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.teamAdminIAMRole }}
                    - arn:aws:iam::{{ .Values.global.awsAccountId }}:root
              allowKeyAdministration:
                Effect: Allow
                Principal:
                  AWS:
                    - arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.crossplaneIAMRole }}
                Action:
                  - kms:Create*
                  - kms:Describe*
                  - kms:Enable*
                  - kms:List*
                  - kms:Put*
                  - kms:Update*
                  - kms:Revoke*
                  - kms:Disable*
                  - kms:Get*
                  - kms:Delete*
                  - kms:ScheduleKeyDeletion
                  - kms:CancelKeyDeletion
                  - kms:TagResource
                  - kms:UntagResource
                Resource: "*"
              allowKeyUsage:
                Effect: Allow
                Action:
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:Encrypt
                  - kms:DescribeKey
                  - kms:Decrypt
                Resource: "*"
                Principal:
                  AWS:
                    - arn:aws:iam::{{.Values.global.awsAccountId}}:role/{{ include "common-gitops.names.release" . }}-cluster
              allowPersistentAttach:
                Effect: Allow
                Action:
                  - kms:RevokeGrant
                  - kms:ListGrants
                  - kms:CreateGrant
                Resource: "*"
                Principal:
                  AWS:
                  - arn:aws:iam::{{.Values.global.awsAccountId}}:role/{{ include "common-gitops.names.release" . }}-cluster
                Condition:
                  Bool:
                    kms:GrantIsForAWSResource: 'true'


  ## @skip crossplane-aws-kms.Alias
  ##
  Alias:
    items:
      cluster:
        forProvider:
          targetKeyIdRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'

## @section Dependency: crossplane-aws-eks upstream helm chart parameters for creating EKS resources
## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-eks/values.yaml
##

crossplane-aws-eks:
  ## @param crossplane-aws-eks.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

  ## @skip crossplane-aws-eks.Cluster
  ##
  Cluster:
    items:
      _:
        forProvider:
          version: '{{ .Values.global.eksVersion }}'
          enabledClusterLogTypes:
            - api
            - audit
            - authenticator
            - controllerManager
            - scheduler
          roleArnRef:
            name: '{{ include "common-gitops.names.release" . }}-cluster'
          encryptionConfig:
            - provider:
                - keyArn: 'arn:aws:kms:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:alias/{{ include "common-gitops.names.release" . }}-cluster'
              resources:
                - "secrets"
          vpcConfig:
            - endpointPrivateAccess: true
              endpointPublicAccess: true
              publicAccessCidrs:
                - "0.0.0.0/0"
              subnetIdSelector:
                matchLabels:
                  subnetType: private
                  app.kubernetes.io/part-of: '{{ .Values.global.vpcFullname }}'
              securityGroupIdRefs:
                - name: '{{ include "common-gitops.names.release" . }}-cluster'

  ## @skip crossplane-aws-eks.ClusterAuth
  ##
  ClusterAuth:
    items:
      _:
        # As of Aug 4 2023 publishConnectionDetailsTo generates an empty secret while writeConnectionSecretToRef works fine
        # publishConnectionDetailsTo:
        #   enabled: true
        writeConnectionSecretToRef:
          enabled: true
          name: '{{ include "common-gitops.names.release" . }}'
          namespace: '{{ .Release.Namespace }}'
        forProvider:
          clusterNameRef:
            name: '{{ include "common-gitops.names.release" . }}'

  ## @skip crossplane-aws-eks.NodeGroup
  ##
  NodeGroup:
    items:
      private:
        forProvider:
          amiType: AL2_x86_64
          capacityType: SPOT
          clusterNameRef:
            name: '{{ include "common-gitops.names.release" . }}'
          diskSize: 50
          instanceTypes:
            - "c5ad.4xlarge"
            - "c6id.4xlarge"
            - "m5ad.4xlarge"
          nodeRoleArnRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
          releaseVersion: '{{ .Values.global.eksNodeVersion }}'
          # Consider using SSM instead
          # remoteAccess:
          #   ec2SSHKey: "iac-infra-eks-keypair-manual"
          #   sourceSecurityGroupRefs:
          #     - name: '{{ include "common-gitops.names.release" . }}-node'
          scalingConfig:
            - desiredSize: 1
              maxSize: 1
              minSize: 1
          subnetIdSelector:
            matchLabels:
              subnetType: private
              app.kubernetes.io/part-of: '{{ .Values.global.vpcFullname }}'
          labels:
            nodeType: "private"
          versionRef:
            name: '{{ include "common-gitops.names.release" . }}'
      public:
        forProvider:
          amiType: AL2_x86_64
          capacityType: SPOT
          clusterNameRef:
            name: '{{ include "common-gitops.names.release" . }}'
          diskSize: 50
          instanceTypes:
            - "c5ad.4xlarge"
            - "c6id.4xlarge"
            - "m5ad.4xlarge"
          nodeRoleArnRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
          releaseVersion: '{{ .Values.global.eksNodeVersion }}'
          scalingConfig:
            - desiredSize: 1
              maxSize: 1
              minSize: 1
          subnetIdSelector:
            matchLabels:
              subnetType: public
              app.kubernetes.io/part-of: '{{ .Values.global.vpcFullname }}'
          labels:
            nodeType: "public"
          versionRef:
            name: '{{ include "common-gitops.names.release" . }}'

  ## @skip crossplane-aws-eks.Addon
  ##
  Addon:
    items:
      vpc-cni:
        annotations:
          crossplane.io/external-name: '{{ include "common-gitops.names.release" . }}:vpc-cni'
        forProvider:
          addonName: vpc-cni
          addonVersion: v1.18.0-eksbuild.1
          clusterNameRef:
            name: '{{ include "common-gitops.names.release" . }}'
      aws-ebs-csi-driver:
        annotations:
          crossplane.io/external-name: '{{ include "common-gitops.names.release" . }}:aws-ebs-csi-driver'
        forProvider:
          addonName: aws-ebs-csi-driver
          addonVersion: v1.29.1-eksbuild.1
          clusterNameRef:
            name: '{{ include "common-gitops.names.release" . }}'
      kube-proxy:
        annotations:
          crossplane.io/external-name: '{{ include "common-gitops.names.release" . }}:kube-proxy'
        forProvider:
          addonName: kube-proxy
          addonVersion: v1.25.16-eksbuild.3
          clusterNameRef:
            name: '{{ include "common-gitops.names.release" . }}'

## @section Dependency: external-secrets upstream helm chart parameters for creating EKS resources
##

external-secrets:
  ## @param external-secrets.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

  ## @skip external-secrets.external-secrets
  ## Keep this disabled, we are not expected to deploy the external secrets application as part of the eks Helm chart
  ##
  external-secrets:
    enabled: false

  ## @skip external-secrets.EksClusterExternalSecret
  ##
  EksClusterExternalSecret:
    enabled: true
    items:
      _:
        namespace: '{{ .Values.global.crossplaneNamespace }}'
        annotations:
          eksClusterName: '{{ include "common-gitops.names.release" . }}'
          vpcFullname: "{{ .Values.global.vpcFullname }}"
          # AWS vars
          awsMgmtAccountId: '{{ .Values.global.awsMgmtAccountId }}'
          awsBackupAccountId: '{{ .Values.global.awsBackupAccountId }}'
          awsAccountId: '{{ .Values.global.awsAccountId }}'
          awsRegion: '{{ .Values.global.awsRegion }}'
          # Crossplane vars
          crossplaneNamespace: '{{ .Values.global.crossplaneNamespace }}'
          crossplaneIAMRole: '{{ .Values.global.crossplaneIAMRole }}'
          infraProviderConfigRefName: '{{ .Values.global.infraProviderConfigRefName }}'
          providerConfigRefName: '{{ .Values.global.providerConfigRef.name }}'
          # ArgoCD vars
          argocdNamespace: "{{ .Values.global.argocdNamespace }}"
          argocdIAMRole: "{{ .Values.global.argocdIAMRole }}"
          # Kubed reflects metadata, which we use, so can't use reflector here
          kubed.appscode.com/sync: "kubernetes.io/metadata.name={{ .Values.global.argocdNamespace }}"
        labels:
          argocd.argoproj.io/secret-type: cluster


  ## @skip external-secrets.ExternalSecretRole
  ##
  ExternalSecretRole:
    enabled: true
    items:
      _:
        namespace: '{{ .Values.global.crossplaneNamespace }}'


  ## @skip external-secrets.ExternalSecretRoleBinding
  ##
  ExternalSecretRoleBinding:
    enabled: true
    items:
      _:
        namespace: '{{ .Values.global.crossplaneNamespace }}'


  ## @skip external-secrets.SecretStore
  ##
  SecretStore:
    enabled: true
    items:
      _:
        namespace: '{{ .Values.global.crossplaneNamespace }}'
        provider:
          kubernetes:
            remoteNamespace: '{{ .Values.global.crossplaneNamespace }}'
            server:
              url: "https://kubernetes.default.svc"
              caProvider:
                type: ConfigMap
                name: kube-root-ca.crt
                key: ca.crt


  ## @skip external-secrets.ExternalSecretsServiceAccount
  ##
  ExternalSecretsServiceAccount:
    enabled: true
    items:
      _:
        namespace: '{{ .Values.global.crossplaneNamespace }}'
