---
## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##

global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: ""
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.providerConfigRef.name Default crossplane provider all resources generated for crossplane.
  ##
  providerConfigRef:
    name: crossplane-provider-config-aws
  ## @param global.awsAccountId Default aws account id for crossplane aws provider resources. Quotes are important, value must be a string.
  ##
  awsAccountId: "0123456789"
  ## @param global.awsRegion Default aws region for crossplane aws provider resources.
  ##
  awsRegion: us-west-2
  ## @param global.vpcFullname VPC to use for this EKS cluster
  ##
  vpcFullname: infra-aws-vpc
  ## @param global.eksHash Default EKS cluster hash for relevant crossplane resources such as IAM Role.
  ##
  eksHash: "XXXXX"
  ## @param global.eksClusterName EKS Cluster name
  ##
  eksClusterName: infra-aws-eks
  ## @param global.deploymentName Deployment name used as fullnameoverride for upstream chart.
  ##
  deploymentName: karpenter

## @skip crossplane-aws-iam
crossplane-aws-iam:
  enabled: false
  Policy:
    items:
      _:
        forProvider:
          description: "IAM Policy for karpenter to access aws services"
          policy:
            Statement:
              allowScopedEc2InstanceActions:
                Action:
                  - ec2:CreateFleet
                  - ec2:RunInstances
                Effect: Allow
                Resource:
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}::image/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}::snapshot/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:spot-instances-request/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:security-group/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:subnet/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:launch-template/*"
              allowScopedEC2LaunchTemplateActions:
                Action: "ec2:CreateLaunchTemplate"
                Effect: Allow
                Resource: "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:launch-template/*"
                Condition:
                  StringEquals:
                    "aws:RequestTag/kubernetes.io/cluster/{{ .Values.global.eksClusterName }}": "owned"
                  StringLike:
                    'aws:RequestTag/karpenter.sh/provisioner-name': "*"
              allowScopedEC2InstanceActionsWithTags:
                Action:
                  - "ec2:RunInstances"
                  - "ec2:CreateFleet"
                Effect: Allow
                Resource:
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:fleet/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:instance/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:volume/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:network-interface/*"
                Condition:
                  StringEquals:
                    "aws:RequestTag/kubernetes.io/cluster/{{ .Values.global.eksClusterName }}": "owned"
                  StringLike:
                    'aws:RequestTag/karpenter.sh/provisioner-name': "*"
              allowScopedResourceCreationTagging:
                Action: "ec2:CreateTags"
                Effect: Allow
                Resource:
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:fleet/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:instance/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:volume/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:network-interface/*"
                  - "arn:aws:ec2:{{ .Values.global.awsRegion }}:*:launch-template/*"
                Condition:
                  StringEquals:
                    "aws:RequestTag/kubernetes.io/cluster/{{ .Values.global.eksClusterName }}": "owned"
                    "ec2:CreateAction":
                      - "RunInstances"
                      - "CreateFleet"
                      - "CreateLaunchTemplate"
                  StringLike:
                    'aws:RequestTag/karpenter.sh/provisioner-name': "*"
              allowMachineMigrationTagging:
                Action: "ec2:CreateTags"
                Effect: Allow
                Resource: "arn:${AWS::Partition}:ec2:{{ .Values.global.awsRegion }}:*:instance/*"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/kubernetes.io/cluster/{{ .Values.global.eksClusterName }}": "owned"
                    "aws:RequestTag/karpenter.sh/managed-by": "{{ .Values.global.eksClusterName }}"
                  StringLike:
                    'aws:RequestTag/karpenter.sh/provisioner-name': "*"
              allowScopedDeletion:
                Action:
                  - "ec2:TerminateInstances"
                  - "ec2:DeleteLaunchTemplate"
                Effect: Allow
                Resource:
                  - "arn:${AWS::Partition}:ec2:{{ .Values.global.awsRegion }}:*:instance/*"
                  - "arn:${AWS::Partition}:ec2:{{ .Values.global.awsRegion }}:*:launch-template/*"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/kubernetes.io/cluster/{{ .Values.global.eksClusterName }}": "owned"
                  StringLike:
                    'aws:RequestTag/karpenter.sh/provisioner-name': "*"
              allowRegionalReadActions:
                Action:
                  - "ec2:DescribeAvailabilityZones"
                  - "ec2:DescribeImages"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeInstanceTypeOfferings"
                  - "ec2:DescribeInstanceTypes"
                  - "ec2:DescribeLaunchTemplates"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSpotPriceHistory"
                  - "ec2:DescribeSubnets"
                Effect: Allow
                Resource: "*"
                Condition:
                  StringEquals:
                    "aws:RequestedRegion": "{{ .Values.global.awsRegion }}"
              allowGlobalReadActions:
                Action:
                  - "pricing:GetProducts"
                  - "ssm:GetParameter"
                Effect: Allow
                Resource: "*"
              allowInterruptionQueueActions:
                Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                Resource: "arn:aws:sqs:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:karpenter-{{ .Values.global.eksClusterName }}"
              allowPassingInstanceRole:
                Effect: Allow
                Action: iam:PassRole
                Condition:
                  StringEquals:
                    iam:PassedToService: ec2.amazonaws.com
                Resource: '*'
              allowAPIServerEndpointDiscovery:
                Effect: Allow
                Action: eks:DescribeCluster
                Resource: arn:aws:eks:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:cluster/{{ .Values.global.eksClusterName }}
              # TODO: How are next 2 policies used by Karpenter?
              allowElasticLBRegisterInstances:
                Effect: Allow
                Action: elasticloadbalancing:RegisterInstancesWithLoadBalancer
                Resource: arn:aws:elasticloadbalancing:*:*:loadbalancer/*
              allowElasticLBRegisterTargets:
                Effect: Allow
                Action: elasticloadbalancing:RegisterTargets
                Resource: arn:aws:elasticloadbalancing:*:*:*/*
  Role:
    items:
      node:
        forProvider:
          assumeRolePolicy:
            Statement:
              allowEC2AssumeRole:
                Effect: Allow
                Principal:
                  Service: ec2.amazonaws.com
                Action: sts:AssumeRole

      _:
        forProvider:
          description: "IAM Role for karpenter"
          assumeRolePolicy:
            Statement:
              allowAssumeRoleWebIdentity:
                Effect: Allow
                Action: sts:AssumeRoleWithWebIdentity
                Principal:
                  Federated: arn:aws:iam::{{ .Values.global.awsAccountId }}:oidc-provider/oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}
                Condition:
                  StringEquals:
                    'oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}:sub': 'system:serviceaccount:{{ .Release.Namespace }}:{{ .Values.global.deploymentName }}'
                    'oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}:aud': 'sts.amazonaws.com'
              allowEC2AssumeRole:
                Effect: Allow
                Principal:
                  Service: ec2.amazonaws.com
                Action: sts:AssumeRole
              allowspotfleetAssumeRole:
                Effect: Allow
                Principal:
                  Service: spotfleet.amazonaws.com
                Action: sts:AssumeRole
              allowSelfAssumeRole:
                Effect: Allow
                Principal:
                  AWS: '*'
                Action: sts:AssumeRole
                Condition:
                  ArnLike:
                    "aws:PrincipalArn": 'arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ include "common-gitops.names.release" . }}'

  InstanceProfile:
    items:
      node:
        forProvider:
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'

  RolePolicyAttachment:
    items:
      _:
        forProvider:
          policyArnRef:
            name: '{{ include "common-gitops.names.release" . }}'
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}'
      eks-cni:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      ebs-csi:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      eks-worker-node:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      ecr-read:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      ssm-managed-core-inst:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'
      # Needed for windows support: https://docs.aws.amazon.com/eks/latest/userguide/windows-support.html
      eks-vpc-res-cont:
        forProvider:
          policyArn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-node'

## @skip crossplane-aws-sqs
##
crossplane-aws-sqs:
  enabled: false
  Queue:
    items:
      _:
        forProvider:
          messageRetentionSeconds: 300
          sqsManagedSseEnabled: true
  QueuePolicy:
    items:
      _:
        forProvider:
          queueUrlRef:
            name: '{{ include "common-gitops.names.release" . }}'
          policy:
            Statement:
              ec2InterruptionPolicy:
                Effect: Allow
                Principal:
                  Service:
                    - events.amazonaws.com
                    - sqs.amazonaws.com
                Action: 'sqs:SendMessage'
                Resource: 'arn:aws:sqs:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:{{ include "common-gitops.names.release" . }}'

## @skip crossplane-aws-cloudwatchevents
##
crossplane-aws-cloudwatchevents:
  enabled: false
  Rule:
    items:
      scheduled-change:
        forProvider:
          eventPattern: |
            {
              "source": [ "aws.health" ],
              "detail-type": "AWS Health Event"
            }
      spot-interruption:
        forProvider:
          eventPattern: |
            {
              "source": [ "aws.ec2" ],
              "detail-type": "EC2 Spot Instance Interruption Warning"
            }
      rebalance:
        forProvider:
          eventPattern: |
            {
              "source": [ "aws.ec2" ],
              "detail-type": "EC2 Instance Rebalance Recommendation"
            }
      instance-state-change:
        forProvider:
          eventPattern: |
            {
              "source": [ "aws.ec2" ],
              "detail-type": "EC2 Instance State-change Notification"
            }
  Target:
    items:
      scheduled-change:
        forProvider:
          ruleRef:
            name: '{{ include "common-gitops.names.release" . }}-scheduled-change'
          arn: 'arn:aws:sqs:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:{{ include "common-gitops.names.release" . }}'
      spot-interruption:
        forProvider:
          ruleRef:
            name: '{{ include "common-gitops.names.release" . }}-spot-interruption'
          arn: 'arn:aws:sqs:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:{{ include "common-gitops.names.release" . }}'
      rebalance:
        forProvider:
          ruleRef:
            name: '{{ include "common-gitops.names.release" . }}-rebalance'
          arn: 'arn:aws:sqs:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:{{ include "common-gitops.names.release" . }}'
      instance-state-change:
        forProvider:
          ruleRef:
            name: '{{ include "common-gitops.names.release" . }}-instance-state-change'
          arn: 'arn:aws:sqs:{{ .Values.global.awsRegion }}:{{ .Values.global.awsAccountId }}:{{ include "common-gitops.names.release" . }}'

## @skip crossplane-aws-ec2
##
crossplane-aws-ec2:
  enabled: false

## @skip karpenter-crd
##
karpenter-crd:
  enabled: false

## @skip karpenter
##
karpenter:
  enabled: false
  fullnameOverride: karpenter
  serviceMonitor:
    enabled: false
    additionalLabels:
      release: monitoring
  # Upstream helm chart does not set resources, but we need it since karpenter also runs on karpenter nodes.
  # Values are based on usage in CICD prod
  controller:
    resources:
      requests:
        cpu: 0.25
        memory: 512Mi
      limits:
        cpu: 0.5
        memory: 1Gi

## @skip Provisioner
##
Provisioner:
  enabled: false
  items:
    _:
      providerRef: # AWSNodeTemplate
        name: '{{ include "common-gitops.names.release" . }}'
      # requirements:
      #   # Zone is taken from subnets anyway
      #   # - key: "topology.kubernetes.io/zone"
      #   #   operator: In
      #   #   values: ["us-west-2a", "us-west-2c", "us-west-2b"]
      #   - key: "karpenter.sh/capacity-type"
      #     operator: In
      #     values: ["spot"]
      #   - key: "node.kubernetes.io/instance-type"
      #     operator: In
      #     values: ["g4dn.4xlarge"]
      #   - key: "kubernetes.io/arch"
      #     operator: In
      #     values: ["amd64"]
      #   - key: kubernetes.io/os
      #     operator: In
      #     values:	["linux"]
      # taints:
      #   - key: "class"
      #     value: "set me"
      #     effect: NoSchedule
      limits:
        resources:
          cpu: 1k
          # memory: 1000Gi
      ttlSecondsAfterEmpty: 30
      ttlSecondsUntilExpired: 7200 # 2 hours

## @skip AWSNodeTemplate
##
AWSNodeTemplate:
  enabled: false
  items:
    _:
      # TODO: Change this to AL2 by default
      amiFamily: Bottlerocket
      instanceProfile: '{{ .Values.global.eksClusterName }}-karpenter-node'
      subnetSelector:
        Name: "{{ .Values.global.vpcFullname }}-private-*"
      securityGroupSelector:
        Name: "eks-cluster-sg-{{ .Values.global.eksClusterName }}-*"
      blockDeviceMappings:
        # Note: Some special instances types may use xvdb as its root device
        #       Most of the generic instance types and AMI images make use of xvda
        #       Bottlerocket uses xvdb as its root device
        - deviceName: /dev/xvdb
          ebs:
            volumeSize: 500Gi
            volumeType: gp3
            iops: 5000
            # encrypted: true
            # kmsKeyID: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
            deleteOnTermination: true
            throughput: 500
            # snapshotID: snap-0123456789
      # userData:  |
      #   [settings.bootstrap-containers.setup-ephemeral-disks]
      #     source = "satishweb/bottlerocket-ephemeral-disk-setup:1.46.5-alpine"
      #     mode = "always"
      #     essential = true
      #     # This will format and mount ephemeral disk at /data
