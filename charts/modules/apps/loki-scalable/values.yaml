---
## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##

global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: ""
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.awsAccountId Default aws account id for crossplane aws provider resources. Quotes are important, value must be a string.
  ##
  awsAccountId: "0123456789"
  ## @param global.awsRegion Default aws region for crossplane aws provider resources.
  ##
  awsRegion: us-east-2
  ## @param global.eksHash Default EKS cluster hash for relevant crossplane resources such as IAM Role.
  ##
  eksHash: "XXXXX"
  ## @param global.providerConfigRef.name Default crossplane provider all resources generated for crossplane.
  ##
  providerConfigRef:
    name: crossplane-provider-config-aws
  ## @param global.awsDeletionPolicy Default crossplane deletion policy for all resources deployed by this helm chart..
  ## This can be overriden for each resource in its section
  awsDeletionPolicy: Orphan
  ## @param global.secretStoreRef External Secrets secret store ref to fetch AWS secret for repo creds
  ##
  secretStoreRef: cluster-secret-store-aws

## @skip crossplane-aws-s3
crossplane-aws-s3:
  enabled: false
  Bucket:
    enabled: true
    items:
      admin:
        forProvider: {}
      chunks:
        forProvider: {}
      ruler:
        forProvider: {}

  BucketPublicAccessBlock:
    items:
      chunks:
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucketRef:
            name: '{{ include "common-gitops.names.release" . }}-chunks'
      admin:
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucketRef:
            name: '{{ include "common-gitops.names.release" . }}-admin'
      ruler:
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucketRef:
            name: '{{ include "common-gitops.names.release" . }}-ruler'

  BucketPolicy:
    items:
      chunks:
        forProvider:
          policy:
            Statement:
              allowFullAccess:
                Effect: "Allow"
                Principal:
                  AWS: 'arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ include "common-gitops.names.release" . }}'
                Action: "s3:*"
                Resource:
                  - 'arn:aws:s3:::{{ include "common-gitops.names.release" . }}-chunks'
                  - 'arn:aws:s3:::{{ include "common-gitops.names.release" . }}-chunks/*'
          bucketRef:
            name: '{{ include "common-gitops.names.release" . }}-chunks'

      admin:
        forProvider:
          policy:
            Statement:
              allowFullAccess:
                Effect: "Allow"
                Principal:
                  AWS: 'arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ include "common-gitops.names.release" . }}'
                Action: "s3:*"
                Resource:
                  - 'arn:aws:s3:::{{ include "common-gitops.names.release" . }}-admin'
                  - 'arn:aws:s3:::{{ include "common-gitops.names.release" . }}-admin/*'
          bucketRef:
            name: '{{ include "common-gitops.names.release" . }}-admin'

      ruler:
        forProvider:
          policy:
            Statement:
              allowFullAccess:
                Effect: "Allow"
                Principal:
                  AWS: 'arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ include "common-gitops.names.release" . }}'
                Action: "s3:*"
                Resource:
                  - 'arn:aws:s3:::{{ include "common-gitops.names.release" . }}-ruler'
                  - 'arn:aws:s3:::{{ include "common-gitops.names.release" . }}-ruler/*'
          bucketRef:
            name: '{{ include "common-gitops.names.release" . }}-ruler'

## @skip crossplane-aws-iam
crossplane-aws-iam:
  enabled: false
  Policy:
    items:
      _:
        forProvider:
          description: "IAM Policy for loki to access AWS services (S3 buckets)"
          policy:
            Statement:
              allowS3ListBuckets:
                Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: '*'
              allowS3ReadWriteObjects:
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - arn:aws:s3:::{{ include "common-gitops.names.release" . }}-admin
                  - arn:aws:s3:::{{ include "common-gitops.names.release" . }}-admin/*
                  - arn:aws:s3:::{{ include "common-gitops.names.release" . }}-chunks
                  - arn:aws:s3:::{{ include "common-gitops.names.release" . }}-chunks/*
                  - arn:aws:s3:::{{ include "common-gitops.names.release" . }}-ruler
                  - arn:aws:s3:::{{ include "common-gitops.names.release" . }}-ruler/*
  Role:
    items:
      _:
        forProvider:
          assumeRolePolicy:
            Statement:
              allowAssumeRoleWebIdentity:
                Effect: Allow
                Action: sts:AssumeRoleWithWebIdentity
                Principal:
                  Federated: arn:aws:iam::{{ .Values.global.awsAccountId }}:oidc-provider/oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}
                Condition:
                  StringEquals:
                    "oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}:sub": system:serviceaccount:{{ include "common-gitops.names.namespace" . }}:{{ .Values.global.deploymentName }}
                    "oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}:aud": sts.amazonaws.com
              allowEC2AssumeRole:
                Effect: Allow
                Principal:
                  Service: ec2.amazonaws.com
                Action: sts:AssumeRole
              allowspotfleetAssumeRole:
                Effect: Allow
                Principal:
                  Service: spotfleet.amazonaws.com
                Action: sts:AssumeRole
              allowSelfAssumeRole:
                Effect: Allow
                Principal:
                  AWS: "*"
                Action: sts:AssumeRole
                Condition:
                  ArnLike:
                    'aws:PrincipalArn': arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ include "common-gitops.names.release" . }}
  RolePolicyAttachment:
    items:
      _:
        forProvider:
          policyArnRef:
            name: '{{ include "common-gitops.names.release" . }}'
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}'

## @section loki
## @skip loki
loki:
  enabled: false
  fullnameOverride: loki
  loki:
    auth_enabled: false
    storage:
      type: s3
      bucketNames: {}
        # chunks: 'change-me-chunks'
        # ruler: 'change-me-ruler'
        # Used only when enterprise is enabled
        # admin: 'change-me-admin'
      s3:
        region: 'us-west-2'
    storage_config:
      boltdb_shipper:
        active_index_directory: /var/loki/index
        shared_store: s3
        cache_location: /var/loki/boltdb-cache
      aws:
        s3: 's3://us-west-2'
        sse_encryption: true
    schema_config:
      configs:
        - from: 2022-11-01
          store: boltdb-shipper
          object_store: s3
          schema: v12
          index:
            prefix: loki_
            period: 24h
    limits_config:
      max_global_streams_per_user: 5000
    server:
      log_level: debug
      grpc_server_max_recv_msg_size: 16777216
    query_scheduler:
      max_outstanding_requests_per_tenant: 1000
  ingress:
    enabled: false
  gateway:
    enabled: true
  read:
    replicas: 2
    persistence:
      storageClass: gp3
  write:
    replicas: 2
    persistence:
      storageClass: gp3
  monitoring:
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
    serviceMonitor:
      enabled: false
      labels:
        release: monitoring
  compactor:
    shared_store: s3
  test:
    enabled: false

## @skip promtail
promtail:
  enabled: false
  fullnameOverride: promtail
  serviceMonitor:
    enabled: false
    labels:
      release: monitoring
  config:
    logLevel: info
    serverPort: 3101
    clients:
      - url: http://loki-gateway/loki/api/v1/push
    snippets:
      extraScrapeConfigs: |
        # Add an additional scrape config for journald
        - job_name: journal
          journal:
            path: /var/log/journal
            max_age: 12h
            labels:
              job: systemd-journal
          relabel_configs:
            - source_labels:
                - __journal__hostname
              target_label: hostname

            # example label values: kubelet.service, containerd.service
            - source_labels:
                - __journal__systemd_unit
              target_label: unit

            # example label values: debug, notice, info, warning, error
            - source_labels:
                - __journal_priority_keyword
              target_label: level
        # Add an additional scrape config for syslog
        - job_name: syslog
          static_configs:
            - targets:
                - localhost
              labels:
                job: syslog
                __path__: /var/log/syslog/*.log
          # relabel_configs:
          #   - source_labels:
          #       - __syslog_message_hostname
          #     target_label: hostname

          #   # example label values: kernel, CRON, kubelet
          #   - source_labels:
          #       - __syslog_message_app_name
          #     target_label: app

          #   # example label values: debug, notice, informational, warning, error
          #   - source_labels:
          #       - __syslog_message_severity
          #     target_label: level

  # Mount journal directory and machine-id file into promtail pods
  extraVolumes:
    - name: journal
      hostPath:
        path: /var/log/journal
    - name: syslog
      hostPath:
        path: /var/log
    - name: machine-id
      hostPath:
        path: /etc/machine-id

  extraVolumeMounts:
    - name: journal
      mountPath: /var/log/journal
      readOnly: true
    - name: syslog
      mountPath: /var/log/syslog
      readOnly: true
    - name: machine-id
      mountPath: /etc/machine-id
      readOnly: true
