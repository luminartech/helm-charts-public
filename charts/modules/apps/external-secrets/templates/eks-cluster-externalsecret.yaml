{{- $kind := "EksClusterExternalSecret" -}}
{{- $root := . -}}
{{- $kindObj := or (get $root.Values $kind) (dict) -}}
{{- range $name, $item := $kindObj.items -}}
  {{- if eq (include "common-gitops.utils.itemEnabled" (dict "root" $root "name" $name "kind" $kind)) "true" }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
    {{- include "common-gitops.labels.standard" (dict "root" $root "name" $name "kind" $kind) | trim | nindent 2 }}
    {{- with .namespace }}
  namespace: {{ include "common-gitops.tplvalues.render" (dict "value" . "context" $root) }}
    {{- else }}
  namespace: {{ $root.Values.global.secretStoreNamespace }}
    {{- end }}
spec:
  target:
    name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}-cluster
    {{- with .creationPolicy }}
    creationPolicy: {{ include "common-gitops.tplvalues.render" (dict "value" . "context" $root) }}
    {{- else }}
    creationPolicy: Orphan
    {{- end }}
    {{- with .deletionPolicy }}
    deletionPolicy: {{ include "common-gitops.tplvalues.render" (dict "value" . "context" $root) }}
    {{- else }}
    deletionPolicy: Retain
    {{- end }}
    # this is how the Kind=Secret will look like
    template:
      type: Opaque
      engineVersion: v2
      metadata:
    {{- include "common-gitops.annotations" (dict "root" $root "name" $name "kind" $kind) | trim | nindent 8 }}
          eksHash: '{{ "{{" }} (split "." (split "/" .server )._2)._0 {{ "}}" }}'
          eksSubDomain: '{{ "{{" }} (split "." (split "/" .server )._2)._1 {{ "}}" }}'
          eksDomain: "eks.amazonaws.com"
    {{- include "common-gitops.labels" (dict "root" $root "name" $name "kind" $kind) | trim | nindent 8 }}
      data:
        name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
        config: |
          {
            "awsAuthConfig": {
              "clusterName": "{{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}",
              "roleARN": "arn:aws:iam::{{ $root.Values.global.awsAccountId }}:role/{{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name) }}"
            },
            "tlsClientConfig": {
              "insecure": false,
              "caData": "{{ "{{" }} .caData | b64enc {{ "}}" }}"
            }
          }
        server: "{{ "{{" }} .server {{ "}}" }}"

    {{- with .refreshInterval }}
  refreshInterval: {{ include "common-gitops.tplvalues.render" (dict "value" . "context" $root) }}
    {{- else }}
  refreshInterval: 1h
    {{- end }}
  secretStoreRef:
    kind: SecretStore
    name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}            # name of the SecretStore (or kind specified)
  data:
  - secretKey: caData
    remoteRef:
      key: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
      property: clusterCA
  - secretKey: server
    remoteRef:
      key: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
      property: endpoint
  {{- end }}
{{- end }}
