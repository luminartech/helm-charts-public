---
## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##

global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: ""
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.providerConfigRef.name Default crossplane provider all resources generated for crossplane.
  ##
  providerConfigRef:
    name: crossplane-provider-config-aws
  ## @param global.awsAccountId Default aws account id for crossplane aws provider resources. Quotes are important, value must be a string.
  ##
  awsAccountId: "0123456789"
  ## @param global.awsRegion Default aws region for crossplane aws provider resources.
  ##
  awsRegion: us-east-2
  ## @param global.githubRepoName Github repo name
  ##
  githubRepoName: gitops-infra-demo
  ## @param global.githubOrg Github Org name
  ##
  githubOrg: satish-labs
  ## @param global.githubAppID Github App ID
  ##
  githubAppID:
  ## @param global.githubAppInstallationID Github Installation ID
  ##
  githubAppInstallationID:
  ## @param global.clusterOwner Vcluster owner
  ##
  clusterOwner: "engineer.name"
  ## @param global.argocdNamespace ArgoCD namespace
  ##
  argocdNamespace: infra-argo-cd
  ## @param global.clusterType K8s cluster type
  ##
  clusterType: vcluster
  ## @param global.clusterExternalDomain cluster external base domain
  ##
  clusterExternalDomain: infra-aws-eks
  ## @skip global.imagePullSecrets Image pull secrets
  ## @skip global.imagePullSecrets[0].name
  ##
  imagePullSecrets: [{name: "infra-dockerhub-creds"}]
  ## @param global.team Team name
  ##
  team: infra
  ## @param global.environment VCluster environment
  ##
  environment: dev
  ## @param global.ingressClassName Ingress class name for events ingresses
  ##
  ingressClassName: nginx-ingress-external
  ## @param global.eventSourceServicePort Event Source port number to use
  ##
  eventSourceServicePort: 11000
  ## @param global.secretStoreRef External secrets cluster secret store name
  ##
  secretStoreRef: cluster-secret-store-aws
  ## @param global.secretStoreNamespace Namespace to store the the AWS Secrets
  ##
  secretStoreNamespace: github-events-gitops-infra-demo

# Note: argo-events hits a bug when there are two triggers configured for the same event source.
#       until that bug is fixed, lets have 1-1 mappings between event source and triggers

# Events:
#   items:
#     pull-requests:
#       eventSources:
#         # dict of one or more event sources
#         default:
#           eventFilter:
#             - 'push'
#             - "ping"
#           apiToken:
#             enabled: true
#           payloadFilters:
#             # Name of the event that triggered the delivery: [pull_request, push, yadayadayada]
#             # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads
#             - path: headers.X-Github-Event
#               type: string
#               value:
#                 - pull_request
#             - path: body.action
#               type: string
#               value:
#                 - opened
#                 - labeled
#                 - reopened
#                 - edited
#                 - synchronize
#             - path: body.pull_request.state
#               type: string
#               value:
#                 - open
#             - path: body.pull_request.base.ref
#               type: string
#               value:
#                 - main
#       triggers:
#         # dict of one or more triggers in the eventgroup
#         default:
#           templateType: k8s
#           source:
#             workflowArgumentParameters:
#               - name: giturl
#               - name: prid
#             workflowTemplateRef:
#               enabled: true
#           parameters:
#             - dataTemplate: '.Input.body.repository.ssh_url'
#               dest: 'spec.arguments.parameters.0.value'
#             - dataTemplate: '.Input.body.pull_request.id'
#               dest: 'spec.arguments.parameters.1.value'
#             - dataTemplate: '.Input.body.after'
#               dest: 'metadata.name'
#               operation: 'append'

## @skip EventSource
EventSource:
  enabled: false
  items:
    _:
      enabled: false
      template:
        securityContext: {}

## @skip EventBus
EventBus:
  enabled: false
  items:
    _:
      name: default
      enabled: false
      nats:
        native:
          containerTemplate: {}

## @skip Sensor
Sensor:
  enabled: false
  items:
    _:
      enabled: false
      sensorContainerTemplate:
        env:
        - name: DEBUG_LOG
          value: 'true'

## @skip Ingress
Ingress:
  enabled: false
  items:
    _:
      enabled: false

## @skip common-res
common-res:
  enabled: false
  # This service account must have rolebinding to clusterrole that
  # grants access to other namespaces to create workflows
  # Security risk: Do not create clusterrolebinding.
  ServiceAccount:
    enabled: false
    items:
      _:
        enabled: true

  ClusterRole:
    enabled: false
    items:
      _:
        rules:
          - apiGroups:
              - argoproj.io
            verbs:
              - create
              - get
              - list
              - watch
              - update
              - patch
              - delete
            resources:
              - workflows
              - cronworkflows
          - apiGroups:
              - argoproj.io
            verbs:
              - get
              - list
            resources:
              - workflowtemplates
              - clusterworkflowtemplates

## @skip external-secrets
external-secrets:
  enabled: false
  AWSExternalSecret:
    enabled: false
    items:
      _:
        name: '{{ .Values.global.team }}-{{ .Values.global.environment }}-gh-{{ .Values.global.githubOrg }}'
        source:
          secretStoreRef:
            name: '{{ .Values.global.secretStoreRef }}'
          data:
            url:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/{{ .Values.global.githubOrg }}'
              awsSecretKey: url
            githubAppID:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/{{ .Values.global.githubOrg }}'
              awsSecretKey: githubAppID
            githubAppInstallationID:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/{{ .Values.global.githubOrg }}'
              awsSecretKey: githubAppInstallationID
            app-client-secret:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/{{ .Values.global.githubOrg }}'
              awsSecretKey: app-client-secret
            app-client-id:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/{{ .Values.global.githubOrg }}'
              awsSecretKey: app-client-id
            githubAppPrivateKey:
              awsSecretName: '{{ .Values.global.team }}-{{ .Values.global.environment }}/gh/{{ .Values.global.githubOrg }}'
              awsSecretKey: githubAppPrivateKey
              # encode secret using command: base64 -w 0 /path/to/pem-key-file
              decodingStrategy: Base64
