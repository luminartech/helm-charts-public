## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##
global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: ""
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.baseDomain Default domain name for ingress resources
  ##
  baseDomain: "mydomain.com"
  ## @param global.dnsSuffix Default DNS name suffix for ingress resources
  ##
  dnsSuffix: "-test"
  storage:
    ## @param global.storage.casSize Persistent volume size for CAS storage
    ##
    casSize: 33Gi
    ## @param global.storage.acSize Persistent volume size for AC storage
    ##
    acSize: 1Gi
  ## @param global.storageClassName Persistent volume claim class
  ##
  storageClassName: gp3
  ## @param global.ingressClassName Ingress class name
  ##
  ingressClassName: nginx

  ## @section Buildbarn Resources configuration
  ## Buildbarn global settings
  ##
  buildbarn:
    ## Buildbarn settings
    ##
    ## TODO: Figure out if we can do yaml to jsonnet/libsonnet in helm
    settings:
      ## Common Settings
      ##
      common:
        global:
          diagnosticsHttpServer:
            httpServers:
              ## @param global.buildbarn.settings.common.global.diagnosticsHttpServer.httpServers.authenticationPolicy Authentication policy for diagnostics HTTP server
              ##
              authenticationPolicy: '{ allow: {} }'
            ## @param global.buildbarn.settings.common.global.diagnosticsHttpServer.enablePrometheus Enable Prometheus metrics for diagnostics HTTP server
            ##
            enablePrometheus: 'true'
            ## @param global.buildbarn.settings.common.global.diagnosticsHttpServer.enablePprof Enable pprof metrics for diagnostics HTTP server
            ##
            enablePprof: 'true'
            ## @param global.buildbarn.settings.common.global.diagnosticsHttpServer.enableActiveSpans Enable collection of active spans for diagnostics HTTP server
            ##
            enableActiveSpans: 'true'
        blobstore:
          contentAddressableStorage:
            sharding:
              ## @param global.buildbarn.settings.common.blobstore.contentAddressableStorage.sharding.hashInitialization Initialization value for hash-based sharding of CAS
              ##
              hashInitialization: '11946695773637837490'
          actionCache:
            completenessChecking:
              backend:
                sharding:
                  ## @param global.buildbarn.settings.common.blobstore.actionCache.completenessChecking.backend.sharding.hashInitialization Initialization value for hash-based sharding of completeness checking backend
                  ##
                  hashInitialization: '14897363947481274433'
              ## @param global.buildbarn.settings.common.blobstore.actionCache.completenessChecking.maximumTotalTreeSizeBytes Maximum total tree size for completeness checking backend
              ##
              maximumTotalTreeSizeBytes: '64 * 1024 * 1024'
        ## @param global.buildbarn.settings.common.maximumMessageSizeBytes Maximum message size for gRPC communication
        ##
        maximumMessageSizeBytes: '2 * 1024 * 1024'

      ## Browser Settings
      ##
      browser:
        httpServers:
          ## @param global.buildbarn.settings.browser.httpServers.authenticationPolicy Authentication policy for browser HTTP server
          ##
          authenticationPolicy: '{ allow: {} }'
        ## @param global.buildbarn.settings.browser.authorizer Browser authorizer policy
        ##
        authorizer: '{ allow: {} }'
        ## @param global.buildbarn.settings.browser.requestMetadataLinksJmespathExpression JMESPath expression to extract request metadata links from the request context
        ##
        requestMetadataLinksJmespathExpression: '`{}`'

      ## Frontend Settings
      ##
      frontend:
        grpcServers:
          ## @param global.buildbarn.settings.frontend.grpcServers.authenticationPolicy Authentication policy for frontend gRPC server
          ##
          authenticationPolicy: '{ allow: {} }'
        contentAddressableStorage:
          ## @param global.buildbarn.settings.frontend.contentAddressableStorage.getAuthorizer Get authorizer policy for CAS
          ##
          getAuthorizer: '{ allow: {} }'
          ## @param global.buildbarn.settings.frontend.contentAddressableStorage.putAuthorizer Put authorizer policy for CAS
          ##
          putAuthorizer: '{ allow: {} }'
          ## @param global.buildbarn.settings.frontend.contentAddressableStorage.findMissingAuthorizer Find missing authorizer policy for CAS
          ##
          findMissingAuthorizer: '{ allow: {} }'
        actionCache:
          ## @param global.buildbarn.settings.frontend.actionCache.getAuthorizer Get authorizer policy for action cache
          ##
          getAuthorizer: '{ allow: {} }'
          ## @param global.buildbarn.settings.frontend.actionCache.putAuthorizer Put authorizer policy for action cache
          ##
          putAuthorizer: '{ allow: {} }'
        ## @param global.buildbarn.settings.frontend.executeAuthorizer Execute authorizer policy for action cache
        ##
        executeAuthorizer: '{ allow: {} }'

      ## Runner Settings
      ##
      runner:
        ## @param global.buildbarn.settings.runner.buildDirectoryPath Build directory path for the runner
        ##
        buildDirectoryPath: '/worker/build'
        grpcServers:
          ## @param global.buildbarn.settings.runner.grpcServers.listenPaths Listen paths for the runner gRPC server
          ##
          listenPaths: "['/worker/runner']"
          ## @param global.buildbarn.settings.runner.grpcServers.authenticationPolicy Authentication policy for runner gRPC server
          ##
          authenticationPolicy: '{ allow: {} }'

      ## Worker Settings
      worker:
        global:
          ## @param global.buildbarn.settings.worker.global.setUmask Umask value for worker processes
          ##
          setUmask: '{ umask: 0 }'
        buildDirectories:
          native:
            ## @param global.buildbarn.settings.worker.buildDirectories.native.buildDirectoryPath Build directory path for native builds
            ##
            buildDirectoryPath: '/worker/build'
            ## @param global.buildbarn.settings.worker.buildDirectories.native.cacheDirectoryPath Cache directory path for native builds
            ##
            cacheDirectoryPath: '/worker/cache'
            ## @param global.buildbarn.settings.worker.buildDirectories.native.maximumCacheFileCount Maximum number of files to retain in the native build cache
            ##
            maximumCacheFileCount: '10000'
            ## @param global.buildbarn.settings.worker.buildDirectories.native.maximumCacheSizeBytes Maximum size of the native build cache
            ##
            maximumCacheSizeBytes: '1024 * 1024 * 1024'
            ## @param global.buildbarn.settings.worker.buildDirectories.native.cacheReplacementPolicy Cache replacement policy for native builds
            ##
            cacheReplacementPolicy: 'LEAST_RECENTLY_USED'
          runners:
            ## @param global.buildbarn.settings.worker.buildDirectories.runners.concurrency Concurrency limit for each runner
            ##
            concurrency: '8'
        ## @param global.buildbarn.settings.worker.outputUploadConcurrency Upload concurrency for worker outputs
        ##
        outputUploadConcurrency: '11'
        directoryCache:
          ## @param global.buildbarn.settings.worker.directoryCache.maximumCount Maximum number of files to retain in the directory cache
          ##
          maximumCount: '1000'
          ## @param global.buildbarn.settings.worker.directoryCache.maximumSizeBytes Maximum size of the directory cache
          ##
          maximumSizeBytes: '1000 * 1024'
          ## @param global.buildbarn.settings.worker.directoryCache.cacheReplacementPolicy Replacement policy for the directory cache
          ##
          cacheReplacementPolicy: 'LEAST_RECENTLY_USED'

      ## Scheduler Settings
      ##
      scheduler:
        ## @param global.buildbarn.settings.scheduler.platformQueueWithNoWorkersTimeout Timeout for platform queues with no workers
        ##
        platformQueueWithNoWorkersTimeout: '900s'
        adminHttpServers:
          ## @param global.buildbarn.settings.scheduler.adminHttpServers.authenticationPolicy Authentication policy for admin HTTP servers
          ##
          authenticationPolicy: '{ allow: {} }'
        clientGrpcServers:
          ## @param global.buildbarn.settings.scheduler.clientGrpcServers.authenticationPolicy Authentication policy for client gRPC servers
          ##
          authenticationPolicy: '{ allow: {} }'
        workerGrpcServers:
          ## @param global.buildbarn.settings.scheduler.workerGrpcServers.authenticationPolicy Authentication policy for worker gRPC servers
          ##
          authenticationPolicy: '{ allow: {} }'
        buildQueueStateGrpcServers:
          ## @param global.buildbarn.settings.scheduler.buildQueueStateGrpcServers.authenticationPolicy Authentication policy for build queue state gRPC servers
          authenticationPolicy: '{ allow: {} }'
        ## @param global.buildbarn.settings.scheduler.executeAuthorizer Execute authorizer policy for scheduler
        ##
        executeAuthorizer: '{ allow: {} }'
        ## @param global.buildbarn.settings.scheduler.modifyDrainsAuthorizer Modify drains authorizer policy for scheduler
        ##
        modifyDrainsAuthorizer: '{ allow: {} }'
        ## @param global.buildbarn.settings.scheduler.killOperationsAuthorizer Kill operations authorizer policy for scheduler
        ##
        killOperationsAuthorizer: '{ allow: {} }'
        actionRouter:
          simple:
            initialSizeClassAnalyzer:
              ## @param global.buildbarn.settings.scheduler.actionRouter.simple.initialSizeClassAnalyzer.defaultExecutionTimeout Default timeout for initial size class analyzer executions
              ##
              defaultExecutionTimeout: '1800s'
              ## @param global.buildbarn.settings.scheduler.actionRouter.simple.initialSizeClassAnalyzer.maximumExecutionTimeout Maximum timeout for initial size class analyzer executions
              ##
              maximumExecutionTimeout: '7200s'

      ## Storage Settings
      storage:
        grpcServers:
          ## @param global.buildbarn.settings.storage.grpcServers.authenticationPolicy Authentication policy for storage gRPC servers
          authenticationPolicy: '{ allow: {} }'
        contentAddressableStorage:
          backend:
            local:
              keyLocationMapOnBlockDevice:
                file:
                  ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapOnBlockDevice.file.path Path to file for key location map
                  ##
                  path: '/storage-cas/key_location_map'
                  ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapOnBlockDevice.file.sizeBytes Size of key location map file
                  ##
                  sizeBytes: '400 * 1024 * 1024'
              ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapMaximumGetAttempts Maximum number of attempts to get a key location from the key location map
              ##
              keyLocationMapMaximumGetAttempts: '8'
              ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapMaximumPutAttempts Maximum number of attempts to put a key location to the key location map
              ##
              keyLocationMapMaximumPutAttempts: '32'
              ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.oldBlocks Number of old blocks to retain
              ##
              oldBlocks: '8'
              ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.currentBlocks Number of current blocks
              ##
              currentBlocks: '24'
              ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.newBlocks Number of new blocks
              ##
              newBlocks: '1'
              blocksOnBlockDevice:
                source:
                  file:
                    ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.blocksOnBlockDevice.source.file.path Path to file for blocks
                    ##
                    path: '/storage-cas/blocks'
                    ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.blocksOnBlockDevice.source.file.sizeBytes Size of file for blocks
                    ##
                    sizeBytes: '32 * 1024 * 1024 * 1024'
                ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.blocksOnBlockDevice.spareBlocks Number of spare blocks
                ##
                spareBlocks: '3'
              persistent:
                ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.persistent.stateDirectoryPath Directory path for persistent state
                ##
                stateDirectoryPath: '/storage-cas/persistent_state'
                ## @param global.buildbarn.settings.storage.contentAddressableStorage.backend.local.persistent.minimumEpochInterval Minimum interval between epochs
                ##
                minimumEpochInterval: '300s'
          ## @param global.buildbarn.settings.storage.contentAddressableStorage.getAuthorizer Authorizer for CAS get operations
          ##
          getAuthorizer: '{ allow: {} }'
          ## @param global.buildbarn.settings.storage.contentAddressableStorage.putAuthorizer Authorizer for CAS put operations
          ##
          putAuthorizer: '{ allow: {} }'
          ## @param global.buildbarn.settings.storage.contentAddressableStorage.findMissingAuthorizer Authorizer for CAS find missing operations
          ##
          findMissingAuthorizer: '{ allow: {} }'
        actionCache:
          backend:
            local:
              keyLocationMapOnBlockDevice:
                file:
                  ## @param global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapOnBlockDevice.file.path Path to file for key location map
                  ##
                  path: '/storage-ac/key_location_map'
                  ## @param global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapOnBlockDevice.file.sizeBytes Size of key location map file
                  ##
                  sizeBytes: '1024 * 1024'
              ## @param global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapMaximumGetAttempts Maximum number of attempts to get a key location from the key location map
              ##
              keyLocationMapMaximumGetAttempts: '8'
              ## @param global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapMaximumPutAttempts Maximum number of attempts to put a key location to the key
              ##
              keyLocationMapMaximumPutAttempts: '32'
              ## @param global.buildbarn.settings.storage.actionCache.backend.local.oldBlocks Number of old blocks to retain
              ##
              oldBlocks: '8'
              ## @param global.buildbarn.settings.storage.actionCache.backend.local.currentBlocks Number of current blocks
              ##
              currentBlocks: '24'
              ## @param global.buildbarn.settings.storage.actionCache.backend.local.newBlocks Number of new blocks
              ##
              newBlocks: '1'
              blocksOnBlockDevice:
                source:
                  file:
                    ## @param global.buildbarn.settings.storage.actionCache.backend.local.blocksOnBlockDevice.source.file.path Path to file for blocks
                    ##
                    path: '/storage-ac/blocks'
                    ## @param global.buildbarn.settings.storage.actionCache.backend.local.blocksOnBlockDevice.source.file.sizeBytes Size of file for blocks
                    ##
                    sizeBytes: '20 * 1024 * 1024'
                ## @param global.buildbarn.settings.storage.actionCache.backend.local.blocksOnBlockDevice.spareBlocks Number of spare blocks
                ##
                spareBlocks: '3'
              persistent:
                ## @param global.buildbarn.settings.storage.actionCache.backend.local.persistent.stateDirectoryPath Directory path for persistent state
                ##
                stateDirectoryPath: '/storage-ac/persistent_state'
                ## @param global.buildbarn.settings.storage.actionCache.backend.local.persistent.minimumEpochInterval Minimum interval between epochs
                ##
                minimumEpochInterval: '300s'
          ## @param global.buildbarn.settings.storage.actionCache.getAuthorizer Authorizer for action cache get operations
          ##
          getAuthorizer: '{ allow: {} }'
          ## @param global.buildbarn.settings.storage.actionCache.putAuthorizer Authorizer for action cache put operations
          ##
          putAuthorizer: '{ allow: {} }'

    ## Container images for buildbarn components
    ##
    images:
      ## @param global.buildbarn.images.browser Browser component container image
      ##
      browser: "ghcr.io/buildbarn/bb-browser:20240228T152807Z-ab65d55"
      ## @param global.buildbarn.images.frontend Frontend component container image
      ##
      frontend: "ghcr.io/buildbarn/bb-storage:20240227T100204Z-0aa40df"
      ## @param global.buildbarn.images.scheduler Scheduler component container image
      ##
      scheduler: "ghcr.io/buildbarn/bb-scheduler:20240303T174236Z-9791c09"
      ## @param global.buildbarn.images.storage Storage component container image
      ##
      storage: "ghcr.io/buildbarn/bb-storage:20240227T100204Z-0aa40df"
      ## @param global.buildbarn.images.runner Runner component container image
      ##
      runner: "ghcr.io/catthehacker/ubuntu:act-22.04@sha256:5f9c35c25db1d51a8ddaae5c0ba8d3c163c5e9a4a6cc97acd409ac7eae239448"
      ## @param global.buildbarn.images.worker Worker component container image
      ##
      worker: "ghcr.io/buildbarn/bb-worker:20240303T174236Z-9791c09"
      ## @param global.buildbarn.images.runnerInstaller Runner installer container image
      ##
      runnerInstaller: "ghcr.io/buildbarn/bb-runner-installer:20240303T174236Z-9791c09"
      ## @param global.buildbarn.images.volumeInit volume-init container image
      ##
      volumeInit: "busybox:1.31.1-uclibc"

    ## Resources for each buildbarn component
    ##
    ## Storage Daemon:
    ## The storage daemon manages the build cache and storage.
    ## Recommended resource settings:
    ## CPU: At least 1 vCPU (adjust based on workload).
    ## Memory: At least 1 GB (adjust based on cache size and concurrent requests).
    ## Disk: Sufficient storage for caching build artifacts (depends on your use case).

    ## Runner:
    ## The runner executes build actions.
    ## Recommended resource settings:
    ## CPU: At least 1 vCPU (adjust based on parallelism and workload).
    ## Memory: At least 1 GB (adjust based on build complexity).
    ## Disk: Enough space for temporary files during build execution.

    ## Scheduler:
    ## The scheduler manages build requests and distributes them to workers.
    ## Recommended resource settings:
    ## CPU: At least 1 vCPU (adjust based on request rate).
    ## Memory: At least 1 GB (adjust based on concurrent requests).
    ## Disk: Minimal disk usage (mostly in-memory operations).

    ## Worker:
    ## The worker executes build actions on behalf of the scheduler.
    ## Recommended resource settings:
    ## CPU: At least 1 vCPU (adjust based on parallelism and workload).
    ## Memory: At least 1 GB (adjust based on build complexity).
    ## Disk: Enough space for temporary files during build execution.

    ## Frontend Servers (if applicable):
    ## Stateless servers that fan out requests from clients to the storage daemon.
    ## Recommended resource settings:
    ## CPU: Minimal (mostly routing requests).
    ## Memory: Minimal (stateless operations).

    resources:
      browser:
        requests:
          ## @param global.buildbarn.resources.browser.requests.cpu CPU requests for browser buildbarn component
          ##
          cpu: "0.5"
          ## @param global.buildbarn.resources.browser.requests.memory Memory requests for browser buildbarn component
          ##
          memory: "256Mi"
        limits:
          ## @param global.buildbarn.resources.browser.limits.cpu CPU limits for browser buildbarn component
          ##
          cpu: "1"
          ## @param global.buildbarn.resources.browser.limits.memory Memory limits for browser buildbarn component
          ##
          memory: "512Mi"
      frontend:
        requests:
          ## @param global.buildbarn.resources.frontend.requests.cpu CPU requests for frontend buildbarn component
          ##
          cpu: "0.5"
          ## @param global.buildbarn.resources.frontend.requests.memory Memory requests for frontend buildbarn component
          ##
          memory: "256Mi"
        limits:
          ## @param global.buildbarn.resources.frontend.limits.cpu CPU limits for frontend buildbarn component
          ##
          cpu: "1"
          ## @param global.buildbarn.resources.frontend.limits.memory Memory limits for frontend buildbarn component
          ##
          memory: "512Mi"
      scheduler:
        requests:
          ## @param global.buildbarn.resources.scheduler.requests.cpu CPU requests for scheduler buildbarn component
          ##
          cpu: "1"
          ## @param global.buildbarn.resources.scheduler.requests.memory Memory requests for scheduler buildbarn component
          ##
          memory: "1Gi"
        limits:
          ## @param global.buildbarn.resources.scheduler.limits.cpu CPU limits for scheduler buildbarn component
          ##
          cpu: "2"
          ## @param global.buildbarn.resources.scheduler.limits.memory Memory limits for scheduler buildbarn component
          ##
          memory: "2Gi"
      storage:
        requests:
          ## @param global.buildbarn.resources.storage.requests.cpu CPU requests for storage buildbarn component
          ##
          cpu: "1"
          ## @param global.buildbarn.resources.storage.requests.memory Memory requests for storage buildbarn component
          ##
          memory: "1Gi"
        limits:
          ## @param global.buildbarn.resources.storage.limits.cpu CPU limits for storage buildbarn component
          ##
          cpu: "2"
          ## @param global.buildbarn.resources.storage.limits.memory Memory limits for storage buildbarn component
          ##
          memory: "2Gi"
      runner:
        requests:
          ## @param global.buildbarn.resources.runner.requests.cpu CPU requests for runner buildbarn component
          ##
          cpu: "4"
          ## @param global.buildbarn.resources.runner.requests.memory Memory requests for runner buildbarn component
          ##
          memory: "8Gi"
        limits:
          ## @param global.buildbarn.resources.runner.limits.cpu CPU limits for runner buildbarn component
          ##
          cpu: "8"
          ## @param global.buildbarn.resources.runner.limits.memory Memory limits for runner buildbarn component
          ##
          memory: "12Gi"
      worker:
        requests:
          ## @param global.buildbarn.resources.worker.requests.cpu CPU requests for worker buildbarn component
          ##
          cpu: "1"
          ## @param global.buildbarn.resources.worker.requests.memory Memory requests for worker buildbarn component
          ##
          memory: "1Gi"
        limits:
          ## @param global.buildbarn.resources.worker.limits.cpu CPU limits for runner buildbarn component
          ##
          cpu: "2"
          ## @param global.buildbarn.resources.worker.limits.memory Memory limits for runner buildbarn component
          ##
          memory: "1Gi"

## @section Buildbarn Advanced Resources configurations
##
common-res:
  ## @param common-res.enabled Toggle for enabling or disabling Buildbarn resources.
  ##
  enabled: true
  Deployment:
    items:
      browser:
        ## @param common-res.Deployment.items.browser.revisionHistoryLimit ReplicaSet revision history limit
        ##
        revisionHistoryLimit: 3
        strategy:
          ## @param common-res.Deployment.items.browser.strategy.type Set the controller upgrade strategy
          ## For Deployments, valid values are Recreate (default) and RollingUpdate.
          ##
          type: "RollingUpdate"
          ## RollingUpdate strategy configuration
          ##
          rollingUpdate:
            ## @param common-res.Deployment.items.browser.strategy.rollingUpdate.maxUnavailable Set deployment RollingUpdate max unavailable
            ##
            maxUnavailable: "66%"
            ## @param common-res.Deployment.items.browser.strategy.rollingUpdate.maxSurge Set deployment RollingUpdate max surge
            ##
            maxSurge: "33%"
        ## @param common-res.Deployment.items.browser.selector Additional selectors for the deployment
        ##
        selector: {}
        ## Pod spec template (to generate spec.template)
        ##
        podSpec:
          spec:
            ## @param common-res.Deployment.items.browser.podSpec.spec.automountServiceAccountToken Automount Service account token
            ##
            automountServiceAccountToken: false
            ## @param common-res.Deployment.items.browser.podSpec.spec.restartPolicy Restart policy for the pod
            restartPolicy: Always
            ## Configure the Security Context for the Pod
            ## @skip common-res.Deployment.items.browser.podSpec.spec.securityContext
            securityContext:
              fsGroup: 1000
              supplementalGroups: []
              fsGroupChangePolicy: OnRootMismatch
            ## Containers configuration
            containers:
              ## @param common-res.Deployment.items.browser.podSpec.spec.containers[0].name
              ##
              - name: browser
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].image
                ##
                image: '{{ .Values.global.buildbarn.images.browser }}'
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].args
                ##
                args:
                  - /config/browser.jsonnet
                ## @param common-res.Deployment.items.browser.podSpec.spec.containers[0].imagePullPolicy Container image pullPolicy. Allowed values: `IfNotPresent`, `Always`, `Never`
                ##
                imagePullPolicy: IfNotPresent
                ## @param common-res.Deployment.items.browser.podSpec.spec.containers[0].tty Determines whether containers in a pod runs with TTY enabled.
                ##
                tty: false
                ## @param common-res.Deployment.items.browser.podSpec.spec.containers[0].stdin Determines whether containers in a pod runs with stdin enabled.
                ##
                stdin: false
                ## Container ports configuration
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].ports
                ##
                ports:
                  - name: http
                    containerPort: 7984
                    protocol: TCP
                ## Default Volume mounts
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].volumeMounts
                ##
                volumeMounts:
                  - name: devshm
                    mountPath: /dev/shm
                    readOnly: false
                  - name: tmp
                    mountPath: /tmp
                    readOnly: false
                  - name: varrun
                    mountPath: /var/run
                    readOnly: false
                  - name: common-config
                    mountPath: /config/common.libsonnet
                    subPath: common.libsonnet
                    readOnly: true
                  - name: browser-config
                    mountPath: /config/browser.jsonnet
                    subPath: browser.jsonnet
                    readOnly: true

                ## Liveness probe configuration
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].livenessProbe
                ##
                livenessProbe:
                  tcpSocket:
                    port: 7984
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Readiness probe configuration
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].readinessProbe
                ##
                readinessProbe:
                  tcpSocket:
                    port: 7984
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Startup probe configuration
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].startupProbe
                ##
                startupProbe:
                  tcpSocket:
                    port: 7984
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Set the resource requests / limits for the main container.
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].resources
                ##
                resources:
                  limits:
                    cpu: '{{ .Values.global.buildbarn.resources.browser.limits.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.browser.limits.memory }}'
                  requests:
                    cpu: '{{ .Values.global.buildbarn.resources.browser.requests.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.browser.requests.memory }}'
                ## Security context configuration
                ## @skip common-res.Deployment.items.browser.podSpec.spec.containers[0].securityContext
                ##
                securityContext:
                  runAsGroup: 1000
                  runAsUser: 1000
                  privileged: false
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                  ## Linux pod capabilities configurations
                  ## https://man7.org/linux/man-pages/man7/capabilities.7.html
                  ##
                  capabilities:
                    drop:
                      - ALL
                    add: []
            ## Pod Volumes configuration
            ## @skip common-res.Deployment.items.browser.podSpec.spec.volumes
            volumes:
              - name: devshm
                emptyDir:
                  medium: Memory
              - name: varrun
                emptyDir:
                  medium: Memory
              - name: tmp
                emptyDir: {}
              - name: common-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-common'
                  items:
                    - key: common.libsonnet
                      path: common.libsonnet
              - name: browser-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-browser'
                  items:
                    - key: browser.jsonnet
                      path: browser.jsonnet

      frontend:
        ## @param common-res.Deployment.items.frontend.revisionHistoryLimit ReplicaSet revision history limit
        ##
        revisionHistoryLimit: 3
        strategy:
          ## @param common-res.Deployment.items.frontend.strategy.type Set the controller upgrade strategy
          ## For Deployments, valid values are Recreate (default) and RollingUpdate.
          ##
          type: "RollingUpdate"
          ## RollingUpdate strategy configuration
          ##
          rollingUpdate:
            ## @param common-res.Deployment.items.frontend.strategy.rollingUpdate.maxUnavailable Set deployment RollingUpdate max unavailable
            ##
            maxUnavailable: "66%"
            ## @param common-res.Deployment.items.frontend.strategy.rollingUpdate.maxSurge Set deployment RollingUpdate max surge
            ##
            maxSurge: "33%"
        ## @param common-res.Deployment.items.frontend.selector Additional selectors for the deployment
        ##
        selector: {}
        ## Pod spec template (to generate spec.template)
        ##
        podSpec:
          spec:
            ## @param common-res.Deployment.items.frontend.podSpec.spec.automountServiceAccountToken Automount Service account token
            ##
            automountServiceAccountToken: false
            ## @param common-res.Deployment.items.frontend.podSpec.spec.restartPolicy Restart policy for the pod
            ##
            restartPolicy: Always
            ## Configure the Security Context for the Pod
            ## @skip common-res.Deployment.items.frontend.podSpec.spec.securityContext
            ##
            securityContext:
              fsGroup: 1000
              supplementalGroups: []
              fsGroupChangePolicy: OnRootMismatch
            ## Containers configuration
            containers:
              ## @param common-res.Deployment.items.frontend.podSpec.spec.containers[0].name
              ##
              - name: frontend
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].image
                ##
                image: '{{ .Values.global.buildbarn.images.frontend }}'
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].args
                ##
                args:
                  - /config/frontend.jsonnet
                ## @param common-res.Deployment.items.frontend.podSpec.spec.containers[0].imagePullPolicy Container image pullPolicy. Allowed values: `IfNotPresent`, `Always`, `Never`
                ##
                imagePullPolicy: IfNotPresent
                ## @param common-res.Deployment.items.frontend.podSpec.spec.containers[0].tty Determines whether containers in a pod runs with TTY enabled.
                ##
                tty: false
                ## @param common-res.Deployment.items.frontend.podSpec.spec.containers[0].stdin Determines whether containers in a pod runs with stdin enabled.
                ##
                stdin: false
                ## Container ports configuration
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].ports
                ##
                ports:
                  - name: grpc
                    containerPort: 8980
                    protocol: TCP
                ## Default Volume mounts
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].volumeMounts
                ##
                volumeMounts:
                  - name: devshm
                    mountPath: /dev/shm
                    readOnly: false
                  - name: tmp
                    mountPath: /tmp
                    readOnly: false
                  - name: varrun
                    mountPath: /var/run
                    readOnly: false
                  - name: common-config
                    mountPath: /config/common.libsonnet
                    subPath: common.libsonnet
                    readOnly: true
                  - name: frontend-config
                    mountPath: /config/frontend.jsonnet
                    subPath: frontend.jsonnet
                    readOnly: true

                ## Liveness probe configuration
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].livenessProbe
                ##
                livenessProbe:
                  tcpSocket:
                    port: 8980
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Readiness probe configuration
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].readinessProbe
                ##
                readinessProbe:
                  tcpSocket:
                    port: 8980
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Startup probe configuration
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].startupProbe
                ##
                startupProbe:
                  tcpSocket:
                    port: 8980
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Set the resource requests / limits for the main container.
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].resources
                ##
                resources:
                  limits:
                    cpu: '{{ .Values.global.buildbarn.resources.frontend.limits.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.frontend.limits.memory }}'
                  requests:
                    cpu: '{{ .Values.global.buildbarn.resources.frontend.requests.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.frontend.requests.memory }}'
                ## Security context configuration
                ## @skip common-res.Deployment.items.frontend.podSpec.spec.containers[0].securityContext
                ##
                securityContext:
                  runAsGroup: 1000
                  runAsUser: 1000
                  privileged: false
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                  ## Linux pod capabilities configurations
                  ## https://man7.org/linux/man-pages/man7/capabilities.7.html
                  ##
                  capabilities:
                    drop:
                      - ALL
                    add: []
            ## Pod Volumes configuration
            ## @skip common-res.Deployment.items.frontend.podSpec.spec.volumes
            volumes:
              - name: devshm
                emptyDir:
                  medium: Memory
              - name: varrun
                emptyDir:
                  medium: Memory
              - name: tmp
                emptyDir: {}
              - name: common-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-common'
                  items:
                    - key: common.libsonnet
                      path: common.libsonnet
              - name: frontend-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-frontend'
                  items:
                    - key: frontend.jsonnet
                      path: frontend.jsonnet
      scheduler:
        ## @param common-res.Deployment.items.scheduler.revisionHistoryLimit ReplicaSet revision history limit
        ##
        revisionHistoryLimit: 3
        strategy:
          ## @param common-res.Deployment.items.scheduler.strategy.type Set the controller upgrade strategy
          ## For Deployments, valid values are Recreate (default) and RollingUpdate.
          ##
          type: "RollingUpdate"
          ## RollingUpdate strategy configuration
          ##
          rollingUpdate:
            ## @param common-res.Deployment.items.scheduler.strategy.rollingUpdate.maxUnavailable Set deployment RollingUpdate max unavailable
            ##
            maxUnavailable: "66%"
            ## @param common-res.Deployment.items.scheduler.strategy.rollingUpdate.maxSurge Set deployment RollingUpdate max surge
            ##
            maxSurge: "33%"
        ## @param common-res.Deployment.items.scheduler.selector Additional selectors for the deployment
        ##
        selector: {}
        ## Pod spec template (to generate spec.template)
        ##
        podSpec:
          spec:
            ## @param common-res.Deployment.items.scheduler.podSpec.spec.automountServiceAccountToken Automount Service account token
            ##
            automountServiceAccountToken: false
            ## @param common-res.Deployment.items.scheduler.podSpec.spec.restartPolicy Restart policy for the pod
            ##
            restartPolicy: Always
            ## Configure the Security Context for the Pod
            ## @skip common-res.Deployment.items.scheduler.podSpec.spec.securityContext
            ##
            securityContext:
              fsGroup: 1000
              supplementalGroups: []
              fsGroupChangePolicy: OnRootMismatch
            ## Containers configuration
            containers:
              ## @param common-res.Deployment.items.scheduler.podSpec.spec.containers[0].name
              ##
              - name: scheduler
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].image
                ##
                image: '{{ .Values.global.buildbarn.images.scheduler }}'
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].args
                ##
                args:
                  - /config/scheduler.jsonnet
                ## @param common-res.Deployment.items.scheduler.podSpec.spec.containers[0].imagePullPolicy Container image pullPolicy. Allowed values: `IfNotPresent`, `Always`, `Never`
                ##
                imagePullPolicy: IfNotPresent
                ## @param common-res.Deployment.items.scheduler.podSpec.spec.containers[0].tty Determines whether containers in a pod runs with TTY enabled.
                ##
                tty: false
                ## @param common-res.Deployment.items.scheduler.podSpec.spec.containers[0].stdin Determines whether containers in a pod runs with stdin enabled.
                ##
                stdin: false
                ## Container ports configuration
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].ports
                ##
                ports:
                  - name: client-grpc
                    containerPort: 8982
                    protocol: TCP
                  - name: worker-grpc
                    containerPort: 8983
                    protocol: TCP
                  - name: buildqueue-grpc
                    containerPort: 8984
                    protocol: TCP
                  - name: http
                    containerPort: 7982
                    protocol: TCP
                ## Default Volume mounts
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].volumeMounts
                ##
                volumeMounts:
                  - name: devshm
                    mountPath: /dev/shm
                    readOnly: false
                  - name: tmp
                    mountPath: /tmp
                    readOnly: false
                  - name: varrun
                    mountPath: /var/run
                    readOnly: false
                  - name: common-config
                    mountPath: /config/common.libsonnet
                    subPath: common.libsonnet
                    readOnly: true
                  - name: scheduler-config
                    mountPath: /config/scheduler.jsonnet
                    subPath: scheduler.jsonnet
                    readOnly: true

                ## Liveness probe configuration
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].livenessProbe
                ##
                livenessProbe:
                  tcpSocket:
                    port: 8983
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Readiness probe configuration
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].readinessProbe
                ##
                readinessProbe:
                  tcpSocket:
                    port: 8983
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Startup probe configuration
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].startupProbe
                ##
                startupProbe:
                  tcpSocket:
                    port: 8983
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Set the resource requests / limits for the main container.
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].resources
                ##
                resources:
                  limits:
                    cpu: '{{ .Values.global.buildbarn.resources.scheduler.limits.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.scheduler.limits.memory }}'
                  requests:
                    cpu: '{{ .Values.global.buildbarn.resources.scheduler.requests.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.scheduler.requests.memory }}'
                ## Security context configuration
                ## @skip common-res.Deployment.items.scheduler.podSpec.spec.containers[0].securityContext
                ##
                securityContext:
                  runAsGroup: 1000
                  runAsUser: 1000
                  privileged: false
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                  ## Linux pod capabilities configurations
                  ## https://man7.org/linux/man-pages/man7/capabilities.7.html
                  ##
                  capabilities:
                    drop:
                      - ALL
                    add: []
            ## Pod Volumes configuration
            ## @skip common-res.Deployment.items.scheduler.podSpec.spec.volumes
            volumes:
              - name: devshm
                emptyDir:
                  medium: Memory
              - name: varrun
                emptyDir:
                  medium: Memory
              - name: tmp
                emptyDir: {}
              - name: common-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-common'
                  items:
                    - key: common.libsonnet
                      path: common.libsonnet
              - name: scheduler-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-scheduler'
                  items:
                    - key: scheduler.jsonnet
                      path: scheduler.jsonnet
      worker:
        ## @param common-res.Deployment.items.worker.revisionHistoryLimit ReplicaSet revision history limit
        ##
        revisionHistoryLimit: 3
        strategy:
          ## @param common-res.Deployment.items.worker.strategy.type Set the controller upgrade strategy
          ## For Deployments, valid values are Recreate (default) and RollingUpdate.
          ##
          type: "RollingUpdate"
          ## RollingUpdate strategy configuration
          ##
          rollingUpdate:
            ## @param common-res.Deployment.items.worker.strategy.rollingUpdate.maxUnavailable Set deployment RollingUpdate max unavailable
            ##
            maxUnavailable: "66%"
            ## @param common-res.Deployment.items.worker.strategy.rollingUpdate.maxSurge Set deployment RollingUpdate max surge
            ##
            maxSurge: "33%"
        ## @param common-res.Deployment.items.worker.selector Additional selectors for the deployment
        ##
        selector: {}
        ## Pod spec template (to generate spec.template)
        ##
        podSpec:
          spec:
            ## @param common-res.Deployment.items.worker.podSpec.spec.automountServiceAccountToken Automount Service account token
            ##
            automountServiceAccountToken: false
            ## @param common-res.Deployment.items.worker.podSpec.spec.restartPolicy Restart policy for the pod
            ##
            restartPolicy: Always
            ## Configure the Security Context for the Pod
            ## @skip common-res.Deployment.items.worker.podSpec.spec.securityContext
            ##
            securityContext:
              fsGroup: 1000
              supplementalGroups: []
              fsGroupChangePolicy: OnRootMismatch
            ## Containers configuration
            containers:
              ## @param common-res.Deployment.items.worker.podSpec.spec.containers[0].name
              ##
              - name: worker
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[0].image
                ##
                image: '{{ .Values.global.buildbarn.images.worker }}'
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[0].args
                ##
                args:
                  - /config/worker.jsonnet
                ## @param common-res.Deployment.items.worker.podSpec.spec.containers[0].imagePullPolicy Container image pullPolicy. Allowed values: `IfNotPresent`, `Always`, `Never`
                ##
                imagePullPolicy: IfNotPresent
                ## @param common-res.Deployment.items.worker.podSpec.spec.containers[0].tty Determines whether containers in a pod runs with TTY enabled.
                ##
                tty: false
                ## @param common-res.Deployment.items.worker.podSpec.spec.containers[0].stdin Determines whether containers in a pod runs with stdin enabled.
                ##
                stdin: false
                ## Default Volume mounts
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[0].volumeMounts
                ##
                volumeMounts:
                  - name: devshm
                    mountPath: /dev/shm
                    readOnly: false
                  - name: tmp
                    mountPath: /tmp
                    readOnly: false
                  - name: varrun
                    mountPath: /var/run
                    readOnly: false
                  - name: common-config
                    mountPath: /config/common.libsonnet
                    subPath: common.libsonnet
                    readOnly: true
                  - name: worker-config
                    mountPath: /config/worker.jsonnet
                    subPath: worker.jsonnet
                    readOnly: true
                  - mountPath: /worker
                    name: worker
                ## Default env variables
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[0].env
                ##
                env:
                  - name: NODE_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                ## Set the resource requests / limits for the main container.
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[0].resources
                ##
                resources:
                  limits:
                    cpu: '{{ .Values.global.buildbarn.resources.worker.limits.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.worker.limits.memory }}'
                  requests:
                    cpu: '{{ .Values.global.buildbarn.resources.worker.requests.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.worker.requests.memory }}'
                ## Security context configuration
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[0].securityContext
                ##
                securityContext:
                  runAsGroup: 1000
                  runAsUser: 1000
                  privileged: false
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                  ## Linux pod capabilities configurations
                  ## https://man7.org/linux/man-pages/man7/capabilities.7.html
                  ##
                  capabilities:
                    drop:
                      - ALL
                    add: []
              ## @param common-res.Deployment.items.worker.podSpec.spec.containers[1].name
              ##
              - name: runner
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[1].image
                ##
                image: '{{ .Values.global.buildbarn.images.runner }}'
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[1].command
                ##
                command: [/bb/tini, -v, --, /bb/bb_runner, /config/runner.jsonnet]
                ## @param common-res.Deployment.items.worker.podSpec.spec.containers[1].imagePullPolicy Container image pullPolicy. Allowed values: `IfNotPresent`, `Always`, `Never`
                ##
                imagePullPolicy: IfNotPresent
                ## @param common-res.Deployment.items.worker.podSpec.spec.containers[1].tty Determines whether containers in a pod runs with TTY enabled.
                ##
                tty: false
                ## @param common-res.Deployment.items.worker.podSpec.spec.containers[1].stdin Determines whether containers in a pod runs with stdin enabled.
                ##
                stdin: false

                ## Default Volume mounts
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[1].volumeMounts
                ##
                volumeMounts:
                  - name: devshm
                    mountPath: /dev/shm
                    readOnly: false
                  - name: tmp
                    mountPath: /tmp
                    readOnly: false
                  - name: varrun
                    mountPath: /var/run
                    readOnly: false
                  - name: common-config
                    mountPath: /config/common.libsonnet
                    subPath: common.libsonnet
                    readOnly: true
                  - name: runner-config
                    mountPath: /config/runner.jsonnet
                    subPath: runner.jsonnet
                    readOnly: true
                  - mountPath: /worker
                    name: worker
                  - mountPath: /bb
                    name: empty
                    readOnly: true
                ## Set the resource requests / limits for the main container.
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[1].resources
                ##
                resources:
                  limits:
                    cpu: '{{ .Values.global.buildbarn.resources.runner.limits.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.runner.limits.memory }}'
                  requests:
                    cpu: '{{ .Values.global.buildbarn.resources.runner.requests.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.runner.requests.memory }}'
                ## Security context configuration
                ## @skip common-res.Deployment.items.worker.podSpec.spec.containers[1].securityContext
                ##
                securityContext:
                  runAsGroup: 1000
                  runAsUser: 1000
                  privileged: false
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                  ## Linux pod capabilities configurations
                  ## https://man7.org/linux/man-pages/man7/capabilities.7.html
                  ##
                  capabilities:
                    drop:
                      - ALL
                    add: []

            ## Init Containers configuration
            ## @skip common-res.Deployment.items.worker.podSpec.spec.initContainers
            ##
            initContainers:
              - name: bb-runner-installer
                image: '{{ .Values.global.buildbarn.images.runnerInstaller }}'
                securityContext:
                  runAsUser: 0  # Run as root user to setup disks
                  allowPrivilegeEscalation: true  # Allow privilege escalation if necessary
                volumeMounts:
                  - mountPath: /bb/
                    name: empty
              - name: volume-init
                image: '{{ .Values.global.buildbarn.images.volumeInit }}'
                command:
                  - sh
                  - -c
                  - mkdir -pm 0777 /worker/build && mkdir -pm 0700 /worker/cache && chmod 0777 /worker && chown -R 1000:1000 /worker/build /worker/cache
                securityContext:
                  runAsUser: 0  # Run as root user to setup disks
                  allowPrivilegeEscalation: true  # Allow privilege escalation if necessary
                volumeMounts:
                  - mountPath: /worker/
                    name: worker

            ## Pod Volumes configuration
            ## @skip common-res.Deployment.items.worker.podSpec.spec.volumes
            volumes:
              - name: empty
                emptyDir: {}
              - name: worker
                emptyDir: {}
              - name: devshm
                emptyDir:
                  medium: Memory
              - name: varrun
                emptyDir:
                  medium: Memory
              - name: tmp
                emptyDir: {}
              - name: common-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-common'
                  items:
                    - key: common.libsonnet
                      path: common.libsonnet
              - name: worker-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-worker'
                  items:
                    - key: worker.jsonnet
                      path: worker.jsonnet
              - name: runner-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-runner'
                  items:
                    - key: runner.jsonnet
                      path: runner.jsonnet
  StatefulSet:
    items:
      storage:
        ## @skip common-res.StatefulSet.items.storage.replicas
        ##
        replicas: 2 # .Values.buildbarn.replicas.storage.min
        ## @param common-res.StatefulSet.items.storage.revisionHistoryLimit ReplicaSet revision history limit
        ##
        revisionHistoryLimit: 3
        ## @param common-res.StatefulSet.items.storage.selector Additional selectors for the deployment
        ##
        selector: {}
        ## Pod spec template (to generate spec.template)
        ##
        podSpec:
          spec:
            ## @param common-res.StatefulSet.items.storage.podSpec.spec.automountServiceAccountToken Automount Service account token
            ##
            automountServiceAccountToken: false
            ## @param common-res.StatefulSet.items.storage.podSpec.spec.restartPolicy Restart policy for the pod
            ##
            restartPolicy: Always
            ## Configure the Security Context for the Pod
            ## @skip common-res.StatefulSet.items.storage.podSpec.spec.securityContext
            ##
            securityContext:
              fsGroup: 1000
              supplementalGroups: []
              fsGroupChangePolicy: OnRootMismatch
            ## Init Containers configuration
            ## @skip common-res.StatefulSet.items.storage.podSpec.spec.initContainers
            ##
            initContainers:
              - name: volume-init
                image: '{{ .Values.global.buildbarn.images.volumeInit }}'
                command:
                  - sh
                  - -c
                  - mkdir -m 0700 -p /storage-cas/persistent_state /storage-ac/persistent_state && chown -R 1000:1000 /storage-cas /storage-ac
                securityContext:
                  runAsUser: 0  # Run as root user to setup disks
                  allowPrivilegeEscalation: true  # Allow privilege escalation if necessary
                volumeMounts:
                - mountPath: "/storage-cas"
                  name: '{{ include "common-gitops.names.release" . }}-storage-cas'
                - mountPath: "/storage-ac"
                  name: '{{ include "common-gitops.names.release" . }}-storage-ac'
            ## Containers configuration
            containers:
              ## @param common-res.StatefulSet.items.storage.podSpec.spec.containers[0].name
              ##
              - name: storage
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].image
                ##
                image: '{{ .Values.global.buildbarn.images.storage }}'
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].args
                ##
                args:
                  - /config/storage.jsonnet
                ## @param common-res.StatefulSet.items.storage.podSpec.spec.containers[0].imagePullPolicy Container image pullPolicy. Allowed values: `IfNotPresent`, `Always`, `Never`
                ##
                imagePullPolicy: IfNotPresent
                ## @param common-res.StatefulSet.items.storage.podSpec.spec.containers[0].tty Determines whether containers in a pod runs with TTY enabled.
                ##
                tty: false
                ## @param common-res.StatefulSet.items.storage.podSpec.spec.containers[0].stdin Determines whether containers in a pod runs with stdin enabled.
                ##
                stdin: false
                ## Container ports configuration
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].ports
                ##
                ports:
                  - name: grpc
                    containerPort: 8981
                    protocol: TCP
                  - name: http
                    containerPort: 9980
                    protocol: TCP
                ## Default Volume mounts
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].volumeMounts
                ##
                volumeMounts:
                  - name: devshm
                    mountPath: /dev/shm
                    readOnly: false
                  - name: tmp
                    mountPath: /tmp
                    readOnly: false
                  - name: varrun
                    mountPath: /var/run
                    readOnly: false
                  - name: common-config
                    mountPath: /config/common.libsonnet
                    subPath: common.libsonnet
                    readOnly: true
                  - name: storage-config
                    mountPath: /config/storage.jsonnet
                    subPath: storage.jsonnet
                    readOnly: true
                  - mountPath: /storage-cas
                    name: '{{ include "common-gitops.names.release" . }}-storage-cas'
                  - mountPath: /storage-ac
                    name: '{{ include "common-gitops.names.release" . }}-storage-ac'

                ## Liveness probe configuration
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].livenessProbe
                ##
                livenessProbe:
                  tcpSocket:
                    port: 8981
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Readiness probe configuration
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].readinessProbe
                ##
                readinessProbe:
                  tcpSocket:
                    port: 8981
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Startup probe configuration
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].startupProbe
                ##
                startupProbe:
                  tcpSocket:
                    port: 8981
                  initialDelaySeconds: 15
                  periodSeconds: 20
                ## Set the resource requests / limits for the main container.
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].resources
                ##
                resources:
                  limits:
                    cpu: '{{ .Values.global.buildbarn.resources.storage.limits.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.storage.limits.memory }}'
                  requests:
                    cpu: '{{ .Values.global.buildbarn.resources.storage.requests.cpu }}'
                    memory: '{{ .Values.global.buildbarn.resources.storage.requests.memory }}'
                ## Security context configuration
                ## @skip common-res.StatefulSet.items.storage.podSpec.spec.containers[0].securityContext
                ##
                securityContext:
                  runAsGroup: 1000
                  runAsUser: 1000
                  privileged: false
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                  ## Linux pod capabilities configurations
                  ## https://man7.org/linux/man-pages/man7/capabilities.7.html
                  ##
                  capabilities:
                    drop:
                      - ALL
                    add: []
            ## Pod Volumes configuration
            ## @skip common-res.StatefulSet.items.storage.podSpec.spec.volumes
            volumes:
              - name: devshm
                emptyDir:
                  medium: Memory
              - name: varrun
                emptyDir:
                  medium: Memory
              - name: tmp
                emptyDir: {}
              - name: common-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-common'
                  items:
                    - key: common.libsonnet
                      path: common.libsonnet
              - name: storage-config
                configMap:
                  name: '{{ include "common-gitops.names.release" . }}-storage'
                  items:
                    - key: storage.jsonnet
                      path: storage.jsonnet
        ## Storage Volume Claims
        ## @skip common-res.StatefulSet.items.storage.volumeClaimTemplates
        ##
        volumeClaimTemplates:
          - apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: '{{ include "common-gitops.names.release" . }}-storage-cas'
            spec:
              accessModes:
              - ReadWriteOnce
              resources:
                requests:
                  storage: '{{ .Values.global.storage.casSize }}'
              storageClassName: '{{ .Values.global.storageClassName }}'
          - apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: '{{ include "common-gitops.names.release" . }}-storage-ac'
            spec:
              accessModes:
              - ReadWriteOnce
              resources:
                requests:
                  storage: '{{ .Values.global.storage.acSize }}'
              storageClassName: '{{ .Values.global.storageClassName }}'

  ## Serviceaccount configuration
  ## @default -- See below
  ##
  ServiceAccount:
    ## ServiceAccount configuration for main pod
    ##
    items:
      browser:
        ## @param common-res.ServiceAccount.items.browser.enabled Specifies whether a service account should be created. Allowed values: `true` or `false`
        ##
        enabled: true
      ## @skip common-res.ServiceAccount.items.frontend
      ##
      frontend:
        enabled: true
      ## @skip common-res.ServiceAccount.items.storage
      ##
      storage:
        enabled: true
      ## @skip common-res.ServiceAccount.items.scheduler
      ##
      scheduler:
        enabled: true
      ## @skip common-res.ServiceAccount.items.worker
      ##
      worker:
        enabled: true
      ## @skip common-res.ServiceAccount.items.runner
      ##
      runner:
        enabled: true

  ## Configure configMaps for the chart here.
  ##
  ConfigMap:
    ## @param common-res.ConfigMap.enabled Enable or Disable the configmap from being created. Allowed values: `true` or `false`
    ##
    enabled: true
    ## Buildbarn config variables
    ##
    items:
      browser:
        ## @skip common-res.ConfigMap.items.browser.data
        data:
          browser.jsonnet: |-
            local common = import 'common.libsonnet';
            {
              blobstore: common.blobstore,
              maximumMessageSizeBytes: common.maximumMessageSizeBytes,
              httpServers: [{
                listenAddresses: [':7984'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.browser.httpServers.authenticationPolicy }},
              }],
              global: common.global,
              authorizer: {{ .Values.global.buildbarn.settings.browser.authorizer }},
              requestMetadataLinksJmespathExpression: '{{ .Values.global.buildbarn.settings.browser.requestMetadataLinksJmespathExpression }}',
            }
      common:
        ## @skip common-res.ConfigMap.items.common.data
        data:
          common.libsonnet: |-
            {
              blobstore: {
                contentAddressableStorage: {
                  sharding: {
                    hashInitialization: {{ .Values.global.buildbarn.settings.common.blobstore.contentAddressableStorage.sharding.hashInitialization }},
                    shards: [
                      {
                        backend: { grpc: { address: '{{ include "common-gitops.names.release" . }}-storage-0.{{ include "common-gitops.names.release" . }}-storage.{{ .Release.Namespace }}:8981' } },
                        weight: 1,
                      },
                      {
                        backend: { grpc: { address: '{{ include "common-gitops.names.release" . }}-storage-1.{{ include "common-gitops.names.release" . }}-storage.{{ .Release.Namespace }}:8981' } },
                        weight: 1,
                      },
                    ],
                  },
                },
                actionCache: {
                  completenessChecking: {
                    backend: {
                      sharding: {
                        hashInitialization: {{ .Values.global.buildbarn.settings.common.blobstore.actionCache.completenessChecking.backend.sharding.hashInitialization }},
                        shards: [
                          {
                            backend: { grpc: { address: '{{ include "common-gitops.names.release" . }}-storage-0.{{ include "common-gitops.names.release" . }}-storage.{{ .Release.Namespace }}:8981' } },
                            weight: 1,
                          },
                          {
                            backend: { grpc: { address: '{{ include "common-gitops.names.release" . }}-storage-1.{{ include "common-gitops.names.release" . }}-storage.{{ .Release.Namespace }}:8981' } },
                            weight: 1,
                          },
                        ],
                      },
                    },
                    maximumTotalTreeSizeBytes: {{ .Values.global.buildbarn.settings.common.blobstore.actionCache.completenessChecking.maximumTotalTreeSizeBytes }},
                  },
                },
              },
              browserUrl: 'https://buildbarn{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}',
              maximumMessageSizeBytes: {{ .Values.global.buildbarn.settings.common.maximumMessageSizeBytes }},
              global: {
                diagnosticsHttpServer: {
                  httpServers: [{
                    listenAddresses: [':9980'],
                    authenticationPolicy: {{ .Values.global.buildbarn.settings.common.global.diagnosticsHttpServer.httpServers.authenticationPolicy }},
                  }],
                  enablePrometheus: {{ .Values.global.buildbarn.settings.common.global.diagnosticsHttpServer.enablePrometheus }},
                  enablePprof: {{ .Values.global.buildbarn.settings.common.global.diagnosticsHttpServer.enablePprof }},
                  enableActiveSpans: {{ .Values.global.buildbarn.settings.common.global.diagnosticsHttpServer.enableActiveSpans }},
                },
              },
            }
      frontend:
        ## @skip common-res.ConfigMap.items.frontend.data
        data:
          frontend.jsonnet: |-
            local common = import 'common.libsonnet';
            {
              grpcServers: [{
                listenAddresses: [':8980'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.frontend.grpcServers.authenticationPolicy }},
              }],
              schedulers: {
                '': {
                  endpoint: {
                    address: '{{ include "common-gitops.names.release" . }}-scheduler:8982',
                    addMetadataJmespathExpression: |||
                      {
                        "build.bazel.remote.execution.v2.requestmetadata-bin": incomingGRPCMetadata."build.bazel.remote.execution.v2.requestmetadata-bin"
                      }
                    |||,
                  },
                },
              },
              maximumMessageSizeBytes: common.maximumMessageSizeBytes,
              global: common.global,
              contentAddressableStorage: {
                backend: common.blobstore.contentAddressableStorage,
                getAuthorizer: {{ .Values.global.buildbarn.settings.frontend.contentAddressableStorage.getAuthorizer }},
                putAuthorizer: {{ .Values.global.buildbarn.settings.frontend.contentAddressableStorage.putAuthorizer }},
                findMissingAuthorizer: {{ .Values.global.buildbarn.settings.frontend.contentAddressableStorage.findMissingAuthorizer }},
              },
              actionCache: {
                backend: common.blobstore.actionCache,
                getAuthorizer: {{ .Values.global.buildbarn.settings.frontend.actionCache.getAuthorizer }},
                putAuthorizer: {{ .Values.global.buildbarn.settings.frontend.actionCache.putAuthorizer }},
              },
              executeAuthorizer: {{ .Values.global.buildbarn.settings.frontend.executeAuthorizer }},
            }
      scheduler:
        ## @skip common-res.ConfigMap.items.scheduler.data
        data:
          scheduler.jsonnet: |-
            local common = import 'common.libsonnet';
            {
              adminHttpServers: [{
                listenAddresses: [':7982'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.scheduler.adminHttpServers.authenticationPolicy }},
              }],
              clientGrpcServers: [{
                listenAddresses: [':8982'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.scheduler.clientGrpcServers.authenticationPolicy }},
              }],
              workerGrpcServers: [{
                listenAddresses: [':8983'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.scheduler.workerGrpcServers.authenticationPolicy }},
              }],
              buildQueueStateGrpcServers: [{
                listenAddresses: [':8984'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.scheduler.buildQueueStateGrpcServers.authenticationPolicy }},
              }],
              browserUrl: common.browserUrl,
              contentAddressableStorage: common.blobstore.contentAddressableStorage,
              maximumMessageSizeBytes: common.maximumMessageSizeBytes,
              global: common.global,
              executeAuthorizer: {{ .Values.global.buildbarn.settings.scheduler.executeAuthorizer }},
              modifyDrainsAuthorizer: {{ .Values.global.buildbarn.settings.scheduler.modifyDrainsAuthorizer }},
              killOperationsAuthorizer: {{ .Values.global.buildbarn.settings.scheduler.killOperationsAuthorizer }},
              actionRouter: {
                simple: {
                  platformKeyExtractor: { actionAndCommand: {} },
                  invocationKeyExtractors: [
                    { correlatedInvocationsId: {} },
                    { toolInvocationId: {} },
                  ],
                  initialSizeClassAnalyzer: {
                    defaultExecutionTimeout: '{{ .Values.global.buildbarn.settings.scheduler.actionRouter.simple.initialSizeClassAnalyzer.defaultExecutionTimeout }}',
                    maximumExecutionTimeout: '{{ .Values.global.buildbarn.settings.scheduler.actionRouter.simple.initialSizeClassAnalyzer.maximumExecutionTimeout }}',
                  },
                },
              },
              platformQueueWithNoWorkersTimeout: '{{ .Values.global.buildbarn.settings.scheduler.platformQueueWithNoWorkersTimeout }}',
            }
      storage:
        ## @skip common-res.ConfigMap.items.storage.data
        data:
          storage.jsonnet: |-
            local common = import 'common.libsonnet';
            {
              grpcServers: [{
                listenAddresses: [':8981'],
                authenticationPolicy: {{ .Values.global.buildbarn.settings.storage.grpcServers.authenticationPolicy }},
              }],
              maximumMessageSizeBytes: common.maximumMessageSizeBytes,
              global: common.global,
              contentAddressableStorage: {
                backend: {
                  'local': {
                    keyLocationMapOnBlockDevice: {
                      file: {
                        path: '{{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapOnBlockDevice.file.path }}',
                        sizeBytes: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapOnBlockDevice.file.sizeBytes }},
                      },
                    },
                    keyLocationMapMaximumGetAttempts: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapMaximumGetAttempts }},
                    keyLocationMapMaximumPutAttempts: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.keyLocationMapMaximumPutAttempts }},
                    oldBlocks: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.oldBlocks }},
                    currentBlocks: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.currentBlocks }},
                    newBlocks: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.newBlocks }},
                    blocksOnBlockDevice: {
                      source: {
                        file: {
                          path: '{{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.blocksOnBlockDevice.source.file.path }}',
                          sizeBytes: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.blocksOnBlockDevice.source.file.sizeBytes }},
                        },
                      },
                      spareBlocks: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.blocksOnBlockDevice.spareBlocks }},
                    },
                    persistent: {
                      stateDirectoryPath: '{{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.persistent.stateDirectoryPath }}',
                      minimumEpochInterval: '{{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.backend.local.persistent.minimumEpochInterval }}',
                    },
                  },
                },
                getAuthorizer: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.getAuthorizer }},
                putAuthorizer: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.putAuthorizer }},
                findMissingAuthorizer: {{ .Values.global.buildbarn.settings.storage.contentAddressableStorage.findMissingAuthorizer }},
              },
              actionCache: {
                backend: {
                  'local': {
                    keyLocationMapOnBlockDevice: {
                      file: {
                        path: '{{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapOnBlockDevice.file.path }}',
                        sizeBytes: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapOnBlockDevice.file.sizeBytes }},
                      },
                    },
                    keyLocationMapMaximumGetAttempts: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapMaximumGetAttempts }},
                    keyLocationMapMaximumPutAttempts: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.keyLocationMapMaximumPutAttempts }},
                    oldBlocks: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.oldBlocks }},
                    currentBlocks: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.currentBlocks }},
                    newBlocks: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.newBlocks }},
                    blocksOnBlockDevice: {
                      source: {
                        file: {
                          path: '{{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.blocksOnBlockDevice.source.file.path }}',
                          sizeBytes: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.blocksOnBlockDevice.source.file.sizeBytes }},
                        },
                      },
                      spareBlocks: {{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.blocksOnBlockDevice.spareBlocks }},
                    },
                    persistent: {
                      stateDirectoryPath: '{{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.persistent.stateDirectoryPath }}',
                      minimumEpochInterval: '{{ .Values.global.buildbarn.settings.storage.actionCache.backend.local.persistent.minimumEpochInterval }}',
                    },
                  },
                },
                getAuthorizer: {{ .Values.global.buildbarn.settings.storage.actionCache.getAuthorizer }},
                putAuthorizer: {{ .Values.global.buildbarn.settings.storage.actionCache.putAuthorizer }},
              },
            }
      runner:
        ## @skip common-res.ConfigMap.items.runner.data
        data:
          runner.jsonnet: |-
            local common = import 'common.libsonnet';
            {
              buildDirectoryPath: '/worker/build',
              // TODO: global: common.global,
              grpcServers: [{
                listenPaths: {{ .Values.global.buildbarn.settings.runner.grpcServers.listenPaths }},
                authenticationPolicy: {{ .Values.global.buildbarn.settings.runner.grpcServers.authenticationPolicy }},
              }],
            }
      worker:
        ## @skip common-res.ConfigMap.items.worker.data
        data:
          worker.jsonnet: |-
            local common = import 'common.libsonnet';
            {
              blobstore: common.blobstore,
              browserUrl: common.browserUrl,
              maximumMessageSizeBytes: common.maximumMessageSizeBytes,
              scheduler: { address: '{{ include "common-gitops.names.release" . }}-scheduler:8983' },
              global: common.global {
                setUmask: {{ .Values.global.buildbarn.settings.worker.global.setUmask }},
              },
              buildDirectories: [{
                native: {
                  buildDirectoryPath: '{{ .Values.global.buildbarn.settings.worker.buildDirectories.native.buildDirectoryPath }}',
                  cacheDirectoryPath: '{{ .Values.global.buildbarn.settings.worker.buildDirectories.native.cacheDirectoryPath }}',
                  maximumCacheFileCount: {{ .Values.global.buildbarn.settings.worker.buildDirectories.native.maximumCacheFileCount }},
                  maximumCacheSizeBytes: {{ .Values.global.buildbarn.settings.worker.buildDirectories.native.maximumCacheSizeBytes }},
                  cacheReplacementPolicy: '{{ .Values.global.buildbarn.settings.worker.buildDirectories.native.cacheReplacementPolicy }}',
                },
                runners: [{
                  endpoint: { address: 'unix:///worker/runner' },
                  concurrency: {{ .Values.global.buildbarn.settings.worker.buildDirectories.runners.concurrency }},
                  platform: {
                    properties: [
                      { name: 'OSFamily', value: 'linux' },
                      { name: 'container-image', value: 'docker://{{ .Values.global.buildbarn.images.runner }}' },
                    ],
                  },
                  workerId: {
                    pod: std.extVar('POD_NAME'),
                    node: std.extVar('NODE_NAME'),
                  },
                }],
              }],
              outputUploadConcurrency: {{ .Values.global.buildbarn.settings.worker.outputUploadConcurrency }},
              directoryCache: {
                maximumCount: {{ .Values.global.buildbarn.settings.worker.directoryCache.maximumCount }},
                maximumSizeBytes: {{ .Values.global.buildbarn.settings.worker.directoryCache.maximumSizeBytes }},
                cacheReplacementPolicy: '{{ .Values.global.buildbarn.settings.worker.directoryCache.cacheReplacementPolicy }}',
              },
            }

  ## Configure the services for the chart here.
  ## Additional services can be added by adding a dictionary key similar to the 'main' service.
  ## @default -- See below
  Service:
    ## Service configuration for main pod
    ##
    items:
      browser:
        ## @param common-res.Service.items.browser.enabled Enables or disables the service
        ##
        enabled: true
        spec:
          ## @skip common-res.Service.items.browser.spec.selector
          ##
          selector:
            app.kubernetes.io/instance: "browser"
            app.kubernetes.io/part-of: '{{ include "common-gitops.names.release" . }}'
          ## @param common-res.Service.items.browser.spec.type Set the service type
          # Options: Simple(Loadbalancer), LoadBalancer, ClusterIP, NodePort
          ##
          type: ClusterIP

          ## @param common-res.Service.items.browser.spec.ipFamilyPolicy Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
          ##
          ipFamilyPolicy: SingleStack

          ## Configure the Service port information here.
          ## Additional ports can be added by adding a dictionary key similar to the 'http' service.
          ## @skip common-res.Service.items.browser.spec.ports
          ##
          ports:
            - name: http
              port: 7984
              protocol: TCP
              targetPort: 7984
      frontend:
        ## @param common-res.Service.items.frontend.enabled Enables or disables the service
        ##
        enabled: true
        spec:
          ## @skip common-res.Service.items.frontend.spec.selector
          ##
          selector:
            app.kubernetes.io/instance: "frontend"
            app.kubernetes.io/part-of: "{{ .Release.Name }}"
          ## @param common-res.Service.items.frontend.spec.type Set the service type
          # Options: Simple(Loadbalancer), LoadBalancer, ClusterIP, NodePort
          ##
          type: ClusterIP

          ## @param common-res.Service.items.frontend.spec.ipFamilyPolicy Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
          ##
          ipFamilyPolicy: SingleStack

          ## Configure the Service port information here.
          ## Additional ports can be added by adding a dictionary key similar to the 'http' service.
          ## @skip common-res.Service.items.frontend.spec.ports
          ##
          ports:
            - name: grpc
              port: 8980
              protocol: TCP
              targetPort: 8980

      storage:
        ## @param common-res.Service.items.storage.enabled Enables or disables the service
        ##
        enabled: true
        spec:
          ## @skip common-res.Service.items.storage.spec.selector
          ##
          selector:
            app.kubernetes.io/instance: "storage"
            app.kubernetes.io/part-of: "{{ .Release.Name }}"
          ## @param common-res.Service.items.storage.spec.type Set the service type
          # Options: Simple(Loadbalancer), LoadBalancer, ClusterIP, NodePort
          ##
          type: ClusterIP

          ## @param common-res.Service.items.storage.spec.ipFamilyPolicy Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
          ##
          ipFamilyPolicy: SingleStack

          ## Configure the Service port information here.
          ## Additional ports can be added by adding a dictionary key similar to the 'http' service.
          ## @skip common-res.Service.items.storage.spec.ports
          ##
          ports:
            - name: grpc
              port: 8981
              protocol: TCP
              targetPort: 8981
            - name: http
              port: 9980
              protocol: TCP
              targetPort: 9980
      scheduler:
        ## @param common-res.Service.items.scheduler.enabled Enables or disables the service
        ##
        enabled: true
        spec:
          ## @skip common-res.Service.items.scheduler.spec.selector
          ##
          selector:
            app.kubernetes.io/instance: "scheduler"
            app.kubernetes.io/part-of: "{{ .Release.Name }}"
          ## @param common-res.Service.items.scheduler.spec.type Set the service type
          # Options: Simple(Loadbalancer), LoadBalancer, ClusterIP, NodePort
          ##
          type: ClusterIP

          ## @param common-res.Service.items.scheduler.spec.ipFamilyPolicy Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
          ##
          ipFamilyPolicy: SingleStack

          ## Configure the Service port information here.
          ## Additional ports can be added by adding a dictionary key similar to the 'http' service.
          ## @skip common-res.Service.items.scheduler.spec.ports
          ##
          ports:
            - name: client-grpc
              port: 8982
              protocol: TCP
              targetPort: 8982
            - name: worker-grpc
              port: 8983
              protocol: TCP
              targetPort: 8983
            - name: buildqueue-grpc
              port: 8984
              protocol: TCP
              targetPort: 8984
            - name: http
              port: 7982
              protocol: TCP
              targetPort: 7982

  ## Configure the ingresses for the chart here.
  ## Additional ingresses can be added by adding a dictionary key similar to the 'main' ingress.
  ## @default -- See below
  ##
  Ingress:
    ## @param common-res.Ingress.enabled Enable or disable the ingress
    ##
    enabled: true
    ## Configure the main ingress for main deployment service
    ##
    items:
      browser:
        ## @skip common-res.Ingress.items.browser.annotations
        annotations:
          # cert-manager.io/acme-challenge-type: dns01
          # cert-manager.io/acme-dns01-provider: route53
          # cert-manager.io/cluster-issuer: my-domain-cluster-issuer
          # kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.allow-http: "false"
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/preserve-trailing-slash: "false"
          # nginx.ingress.kubernetes.io/server-snippet: |
          #   proxy_ssl_verify off;
          #   proxy_set_header X-Forwarded-Proto https;
          nginx.ingress.kubernetes.io/ssl-redirect: "true"

        ## @skip common-res.Ingress.items.browser.labels
        ##
        labels: {}
        ## @skip common-res.Ingress.items.browser.spec
        ##
        spec:
          ingressClassName: '{{ .Values.global.ingressClassName }}'
          rules:
            - host: buildbarn{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: '{{ include "common-gitops.names.release" . }}-browser'
                        port:
                          number: 7984
          tls:
            - secretName: tls-buildbarn{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
              hosts:
                - buildbarn{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
      scheduler:
        ## @skip common-res.Ingress.items.scheduler.annotations
        annotations:
          # cert-manager.io/acme-challenge-type: dns01
          # cert-manager.io/acme-dns01-provider: route53
          # cert-manager.io/cluster-issuer: my-domain-cluster-issuer
          # kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.allow-http: "false"
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/preserve-trailing-slash: "false"
          # nginx.ingress.kubernetes.io/server-snippet: |
          #   proxy_ssl_verify off;
          #   proxy_set_header X-Forwarded-Proto https;
          nginx.ingress.kubernetes.io/ssl-redirect: "true"

        ## @skip common-res.Ingress.items.scheduler.labels
        ##
        labels: {}
        ## @skip common-res.Ingress.items.scheduler.spec
        ##
        spec:
          ingressClassName: '{{ .Values.global.ingressClassName }}'
          rules:
            - host: bb-scheduler{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: '{{ include "common-gitops.names.release" . }}-scheduler'
                        port:
                          number: 7982

          tls:
            - secretName: tls-bb-scheduler{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
              hosts:
                - bb-scheduler{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}

      frontend:
        ## @skip common-res.Ingress.items.frontend.annotations
        annotations:
          # cert-manager.io/acme-challenge-type: dns01
          # cert-manager.io/acme-dns01-provider: route53
          # cert-manager.io/cluster-issuer: my-domain-cluster-issuer
          # kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.allow-http: "false"
          nginx.ingress.kubernetes.io/backend-protocol: GRPC
          nginx.ingress.kubernetes.io/preserve-trailing-slash: "false"
          # nginx.ingress.kubernetes.io/server-snippet: |
          #   proxy_ssl_verify off;
          #   proxy_set_header X-Forwarded-Proto https;
          nginx.ingress.kubernetes.io/ssl-redirect: "true"

        ## @skip common-res.Ingress.items.frontend.labels
        ##
        labels: {}
        ## @skip common-res.Ingress.items.frontend.spec
        ##
        spec:
          ingressClassName: '{{ .Values.global.ingressClassName }}'
          rules:
            - host: bb-grpc{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: '{{ include "common-gitops.names.release" . }}-frontend'
                        port:
                          number: 8980

          tls:
            - secretName: tls-bb-grpc{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}
              hosts:
                - bb-grpc{{ .Values.global.dnsSuffix }}.{{ .Values.global.baseDomain }}

  ## HPA configuration
  ##
  HorizontalPodAutoscaler:
    ## @param common-res.HorizontalPodAutoscaler.enabled Toggle for enabling or disabling template.
    ##
    enabled: false
    ## Main deployment HPA settings
    ## @skip common-res.HorizontalPodAutoscaler.items
    ##
    items:
      browser:
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: '{{ include "common-gitops.names.release" . }}-browser'
          minReplicas: 2
          maxReplicas: 10
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 80
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80
      frontend:
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: '{{ include "common-gitops.names.release" . }}-frontend'
          minReplicas: 3
          maxReplicas: 30
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 80
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80
      scheduler:
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: '{{ include "common-gitops.names.release" . }}-scheduler'
          minReplicas: 2
          maxReplicas: 10
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 80
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80
      worker:
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: '{{ include "common-gitops.names.release" . }}-worker'
          minReplicas: 2
          maxReplicas: 40
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 80
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80
