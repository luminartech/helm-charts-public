---
## @section Global parameters
## Global parameters
## These variables are accessible to all dependency helm charts.
##

global:
  ## @param global.chartNameOverride Overrides the chart name.
  ##
  chartNameOverride: ""
  ## @param global.releaseNameOverride Overrides the release name.
  ##
  releaseNameOverride: "crossplane"
  ## @param global.tags Define common tags for all IAC and app resources generated by this chart.
  ##
  tags: {}
  ## @param global.labels Define common labels for all IAC and app resources generated by this chart.
  ##
  labels: {}
  ## @param global.annotations Define common annotations for all IAC and app resources generated by this chart.
  ##
  annotations: {}
  ## @param global.awsAccountId Default aws account id for crossplane aws provider resources. Quotes are important, value must be a string.
  ##
  awsAccountId: "0123456789"
  ## @param global.awsMgmtAccountId Default aws account id of the main crossplane management instance. Quotes are important, value must be a string.
  ##
  awsMgmtAccountId: "00000000000"
  ## @param global.awsRegion Default aws region for crossplane aws provider resources.
  ##
  awsRegion: us-east-2
  ## @param global.eksHash Default EKS cluster hash for relevant crossplane resources such as IAM Role.
  ##
  eksHash: "XXXXX"
  ## @param global.providerConfigRef.name Default crossplane provider all resources generated for crossplane.
  ##
  providerConfigRef:
    name: crossplane-provider-config-aws
  ## @param global.awsProviderVersion Crossplane official AWS provider version: https://marketplace.upbound.io/providers/upbound/provider-aws/
  ##
  awsProviderVersion: v0.47.1
  ## @param global.kubernetesProviderVersion Crossplane Kubernetes provider version: https://marketplace.upbound.io/providers/crossplane-contrib/provider-kubernetes/
  ##
  kubernetesProviderVersion: v0.11.0
  ## @param global.crossplaneIAMRole Crossplane AWS IAM role with administrative permissions to create cloud resources
  ##
  crossplaneIAMRole: "crossplane-provider-aws"
  ## @param global.crossplaneNamespace Crossplane namespace
  ##
  crossplaneNamespace: "infra-crossplane"

## @section Crossplane configurations
##
ControllerConfig:
  ## @param ControllerConfig.enabled Toggle for enabling or disabling template.
  ##
  enabled: false

  ## @skip ControllerConfig.items
  ## items: Dict of one or more resources of same kind.
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  items:
    ## @skip ControllerConfig.items.aws-xl ControllerConfig with extra large resource allocation for provider pod
    ##
    aws-xl:
      enabled: false
      name: aws-xl
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.crossplaneIAMRole }}"
        argocd.argoproj.io/sync-wave: "-1"
        argocd.argoproj.io/sync-options: 'Validate=false'
      spec:
        args:
          - --debug
          - --enable-external-secret-stores
          - --provider-ttl=250
          - --max-reconcile-rate=10
          - --sync=48h
          - --poll=48h
        podSecurityContext:
          fsGroup: 2000
        resources:
          limits:
            memory: "20000Mi"
            cpu: "10000m"
          requests:
            memory: "18000Mi"
            cpu: "8000m"
    ## @skip ControllerConfig.items.aws-l ControllerConfig with large resource allocation for provider pod
    ##
    aws-l:
      enabled: false
      name: aws-l
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.crossplaneIAMRole }}"
        argocd.argoproj.io/sync-wave: "-1"
        argocd.argoproj.io/sync-options: 'Validate=false'
      spec:
        args:
          - --debug
          - --enable-external-secret-stores
          - --provider-ttl=250
          - --max-reconcile-rate=10
          - --sync=48h
          - --poll=48h
        podSecurityContext:
          fsGroup: 2000
        resources:
          limits:
            memory: "12000Mi"
            cpu: "10000m"
          requests:
            memory: "8000Mi"
            cpu: "8000m"
    ## @skip ControllerConfig.items.aws-m ControllerConfig with medium resource allocation for provider pod
    ##
    aws-m:
      enabled: false
      name: aws-m
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.crossplaneIAMRole }}"
        argocd.argoproj.io/sync-wave: "-1"
        argocd.argoproj.io/sync-options: 'Validate=false'
      spec:
        args:
          - --debug
          - --enable-external-secret-stores
          - --provider-ttl=250
          - --max-reconcile-rate=5
          - --sync=48h
          - --poll=48h
        podSecurityContext:
          fsGroup: 2000
        resources:
          limits:
            memory: "6000Mi"
            cpu: "6000m"
          requests:
            memory: "6000Mi"
            cpu: "4000m"
    ## @skip ControllerConfig.items.aws-s ControllerConfig with small resource allocation for provider pod
    ##
    aws-s:
      enabled: false
      name: aws-s
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::{{ .Values.global.awsAccountId }}:role/{{ .Values.global.crossplaneIAMRole }}"
        argocd.argoproj.io/sync-wave: "-1"
        argocd.argoproj.io/sync-options: 'Validate=false'
      spec:
        args:
          - --debug
          - --enable-external-secret-stores
          - --provider-ttl=250
          - --max-reconcile-rate=3
          - --sync=48h
          - --poll=48h
        podSecurityContext:
          fsGroup: 2000
        resources:
          limits:
            memory: "1000Mi"
            cpu: "2000m"
          requests:
            memory: "1000Mi"
            cpu: "500m"

# Default aws provider config for current aws account. Crossplane IAM role will be used
ProviderConfig:
  ## @param ProviderConfig.enabled Toggle for enabling or disabling template.
  ##
  enabled: false

  ## @skip ProviderConfig.items
  ## items: Dict of one or more resources of same kind.
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  items:
    aws:
      enabled: false
      name: aws
      spec:
        credentials:
          source: IRSA

StoreConfig:
  ## @param StoreConfig.enabled Toggle for enabling or disabling template.
  ##
  enabled: false

  ## @skip StoreConfig.items
  ## items: Dict of one or more resources of same kind.
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  items:
    aws:
      enabled: false
      name: aws
      spec:
        defaultScope: '{{ .Values.global.crossplaneNamespace }}'
        type: Kubernetes
    kubernetes:
      enabled: false
      name: kubernetes
      apiVersion: secrets.crossplane.io/v1alpha1
      spec:
        defaultScope: '{{ .Values.global.crossplaneNamespace }}'
        type: Kubernetes

Provider:
  ## @param Provider.enabled Toggle for enabling or disabling template.
  ##
  enabled: false

  ## @skip Provider.items
  ## items: Dict of one or more resources of same kind.
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  items:
    aws-family:
      enabled: false
      name: aws-family
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-family-aws:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-cloudwatchevents:
      enabled: false
      name: aws-cloudwatchevents
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-cloudwatchevents:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-cloudwatch:
      enabled: false
      name: aws-cloudwatch
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-cloudwatch:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-ec2:
      enabled: false
      name: aws-ec2
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-l'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-ec2:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-eks:
      enabled: false
      name: aws-eks
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-m'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-eks:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-ecr:
      enabled: false
      name: aws-ecr
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-ecr:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-iam:
      enabled: false
      name: aws-iam
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-m'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-iam:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-kms:
      enabled: false
      name: aws-kms
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-m'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-kms:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-lambda:
      enabled: false
      name: aws-lambda
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-lambda:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-s3:
      enabled: false
      name: aws-s3
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-s3:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-sns:
      enabled: false
      name: aws-sns
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-sns:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-sqs:
      enabled: false
      name: aws-sqs
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-sqs:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-ram:
      enabled: false
      name: aws-ram
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-ram:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-route53:
      enabled: false
      name: aws-route53
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-route53:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-secretsmanager:
      enabled: false
      name: aws-secretsmanager
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-secretsmanager:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-rds:
      enabled: false
      name: aws-rds
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-rds:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    aws-efs:
      enabled: false
      name: aws-efs
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      spec:
        controllerConfigRef:
          name: 'aws-s'
        ignoreCrossplaneConstraints: false
        package: "xpkg.upbound.io/upbound/provider-aws-efs:{{ .Values.global.awsProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true
    kubernetes:
      enabled: false
      name: kubernetes
      spec:
        ignoreCrossplaneConstraints: false
        package: "crossplanecontrib/provider-kubernetes:{{ .Values.global.kubernetesProviderVersion }}"
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 1
        skipDependencyResolution: true

## @section Dependency: crossplane upstream helm chart parameters.
## ref: https://artifacthub.io/packages/helm/crossplane/crossplane
##

crossplane:
  ## @param crossplane.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false
  ## See https://github.com/crossplane/crossplane/issues/2877
  ## @skip crossplane.packageCache
  packageCache:
    sizeLimit: '100Mi'
  ## @skip crossplane.enable-external-secret-stores
  enable-external-secret-stores: true
  ## @skip crossplane.installCRDs
  installCRDs: true
  ## @skip crossplane.args
  args:
    - '--enable-external-secret-stores'
    - '--enable-usages'
    # Use providerConfigs for now and upgrade later
    - '--enable-deployment-runtime-configs=false'
  ## @skip crossplane.resourcesCrossplane
  resourcesCrossplane:
    limits:
      memory: "1Gi"
      cpu: "2"
    requests:
      memory: "512Mi"
      cpu: "1"
  ## @skip crossplane.resourcesRBACManager
  resourcesRBACManager:
    limits:
      memory: "200Mi"
      cpu: "300m"
    requests:
      memory: "100Mi"
      cpu: "100m"

## @section Dependency: prometheus-service-discovery upstream helm chart parameters for creating serviceMonitors and podMonitors.
## ref: https://artifacthub.io/packages/helm/crossplane/crossplane
##

prometheus-service-discovery:
  ## @param prometheus-service-discovery.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

## @section Dependency: crossplane-aws-iam upstream helm chart parameters for creating and self managing crossplane IAM role
## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-iam/values.yaml
##

crossplane-aws-iam:
  ## @param crossplane-aws-iam.enabled Toggle for enabling or disabling upstream chart templates.
  ##
  enabled: false

  ## AWS IAM Role resources parameters.
  ## items: Dict of one or more Role resources.
  ## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-iam/templates/role.yaml
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  ##
  Role:
    items:
      provider-aws:
        ## Resource specific additional annotations.
        ## @param crossplane-aws-iam.Role.items.provider-aws.annotations.crossplane.io/external-name AWS resource name to import if exists.
        ## import existing IAM role
        ## crossplane.io/external-name: '{{ include "common-gitops.names.release" . }}'
        ## NOTE: Please do not change name value. It will be same across all the clusters
        annotations:
          crossplane.io/external-name: 'crossplane-provider-aws'
        ## @param crossplane-aws-iam.Role.items.provider-aws.deletionPolicy Deletion policy for the role.
        ## Orphan is recommended to avoid accidental removal of crossplane IAM role
        deletionPolicy: Orphan
        ## AWS Configuration for Role resources.
        ## @skip crossplane-aws-iam.Role.items.provider-aws.forProvider.assumeRolePolicy
        ## Default policy grants assume role permission to the service pod running in given eks cluster, namespace and service account.
        ## sts:AssumeRole cross account ArnLike principal values look similar
        ## however, to avoid duplication error on the infra cluster, wildcard is placed uniquely
        ##
        forProvider:
          assumeRolePolicy:
            Statement:
              allowAssumeRoleWebIdentity:
                Effect: Allow
                Principal:
                  Federated: arn:aws:iam::{{ .Values.global.awsAccountId }}:oidc-provider/oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}
                Action: sts:AssumeRoleWithWebIdentity
                Condition:
                  StringLike:
                    "oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}:sub": system:serviceaccount:{{ .Values.global.crossplaneNamespace }}:*aws*
                    "oidc.eks.{{ .Values.global.awsRegion }}.amazonaws.com/id/{{ .Values.global.eksHash }}:aud": sts.amazonaws.com
              allowSelfAssumeRole:
                Effect: Allow
                Principal:
                  AWS: '*'
                Action: sts:AssumeRole
                Condition:
                  ArnLike:
                    aws:PrincipalArn:
                      - arn:aws:iam::{{ .Values.global.awsAccountId }}:role/*crossplane*
                      - arn:aws:iam::{{ .Values.global.awsMgmtAccountId }}:role/*crossplane*

  ## AWS IAM RolePolicyAttachment resources parameters.
  ## items: Dict of one or more RolePolicyAttachment resources.
  ## ref: https://github.com/luminartech/helm-charts-public/blob/main/charts/iac/crossplane-aws-iam/templates/rolepolicyattachment.yaml
  ## items._: Name of the resource in the kubernetes. "_" generates a default name as releaseName-object name
  ## ref: https://github.com/luminartech/helm-charts-public/blob/478ec718b93063f1eccfa591189ab0f59bf3fd1e/charts/shared/common-gitops/templates/_names.tpl#L50
  ##
  RolePolicyAttachment:
    items:
      provider-aws-adminaccess:
        ## @param crossplane-aws-iam.RolePolicyAttachment.items.provider-aws-adminaccess.deletionPolicy Deletion policy for the role.
        ## Orphan is recommended to avoid accidental removal of policy attachment to crossplane IAM role
        deletionPolicy: Orphan
        ## AWS Configuration for RolePolicyAttachment resources.
        ## @param crossplane-aws-iam.RolePolicyAttachment.items.provider-aws-adminaccess.forProvider.policyArn Default administratorAccess Policy resource ARN name.
        ## @param crossplane-aws-iam.RolePolicyAttachment.items.provider-aws-adminaccess.forProvider.roleRef.name Reference to the Role resource created by this helm chart.
        ##
        forProvider:
          ## TODO: We could create a custom policy that automatically adds statements for each provider family.
          policyArn: "arn:aws:iam::aws:policy/AdministratorAccess"
          roleRef:
            name: '{{ include "common-gitops.names.release" . }}-provider-aws'
