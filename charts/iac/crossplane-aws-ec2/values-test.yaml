---
## AWS EC2 resources configurations

Address:
  items:
    nat-gateway:
      deletionPolicy: Delete
      forProvider:
        domain: vpc

Instance:
  deletionPolicy: Orphan
  items:
    test:
      forProvider:
        imageId: ami-0dc2d3e4c0f9ebd18
        blockDeviceMappings:
         - deviceName: /dev/sdx
           ebs:
             volumeSize: 100
        securityGroupRefs:
          - name: sample-cluster-sg
        subnetIdRef:
          name: sample-subnet1

InternetGateway:
  items:
    vpc:
      forProvider:
        vpcIdRef:
          name: test

LaunchTemplate:
  items:
    test:
      labels:
        crossplane.io/infra-resource: test
      forProvider:
        launchTempalteName: test
        launchTemplateData:
          # blockDeviceMappings:
          #   - deviceName: ""
          #     ebs: {}
          #     noDevice: ""
          #     virtualName: ""
          # # Describes an instance's Capacity Reservation targeting option. You can specify only one option at a time. Use the CapacityReservationPreference parameter to configure the instance to run in On-Demand capacity or to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the CapacityReservationTarget parameter to explicitly target a specific Capacity Reservation or a Capacity Reservation group.
          # capacityReservationSpecification:
          #   capacityReservationPreference: ""
          #   capacityReservationTarget: {}
          # # The CPU options for the instance. Both the core count and threads per core must be specified in the request.
          # cpuOptions:
          #   coreCount: 0
          #   threadsPerCore: 0
          # #zThe credit option for CPU usage of a T2, T3, or T3a instance.
          # creditSpecification:
          #   cpuCredits: ""
          disableAPITermination: false
          ebsOptimized: true
          # elasticGPUSpecifications:
          #   - type_: ""
          # elasticInferenceAccelerators:
          #   - count: 0
          #     type_: ""
          # # Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html) in the Amazon Web Services Nitro Enclaves User Guide.
          # enclaveOptions:
          #   enabled: false
          # # Indicates whether the instance is configured for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites).
          # hibernationOptions:
          #   configured: false
          # # An IAM instance profile.
          # iamInstanceProfile:
          #   arn: ""
          #   name: ""
          # imageID: ""
          # instanceInitiatedShutdownBehavior: ""
          # # The market (purchasing) option for the instances.
          # instanceMarketOptions:
          #   marketType: ""
          #   spotOptions: {}
          # The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes. When you specify multiple parameters, you get instance types that satisfy all of the specified parameters. If you specify multiple values for a parameter, you get instance types that satisfy any of the specified values. You must specify VCpuCount and MemoryMiB. All other parameters are optional. Any unspecified optional parameter is set to its default. For more information, see Attribute-based instance type selection for EC2 Fleet (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html), Attribute-based instance type selection for Spot Fleet (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html), and Spot placement score (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html) in the Amazon EC2 User Guide.
          # instanceRequirements:
          #   acceleratorCount: {}
          #   acceleratorManufacturers: []
          #   acceleratorNames: []
          #   acceleratorTotalMemoryMiB: {}
          #   acceleratorTypes: []
          #   bareMetal: ""
          #   baselineEBSBandwidthMbps: {}
          #   burstablePerformance: ""
          #   cpuManufacturers: []
          #   excludedInstanceTypes: []
          #   instanceGenerations: []
          #   localStorage: ""
          #   localStorageTypes: []
          #   memoryGiBPerVCPU: {}
          #   memoryMiB: {}
          #   networkInterfaceCount: {}
          #   onDemandMaxPricePercentageOverLowestPrice: 0
          #   requireHibernateSupport: false
          #   spotMaxPricePercentageOverLowestPrice: 0
          #   totalLocalStorageGB: {}
          #   vCPUCount: {}
          instanceType: "t3.micro"
          # kernelID: ""
          keyName: "salt-master"
          # licenseSpecifications:
          #   - licenseConfigurationARN: ""
          # # The metadata options for the instance. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide.
          # metadataOptions:
          #   httpEndpoint: ""
          #   httpProtocolIPv6: ""
          #   httpPutResponseHopLimit: 0
          #   httpTokens: ""
          # # Describes the monitoring for the instance.
          # monitoring:
          #   enabled: false
          # networkInterfaces:
          #   associateCarrierIPAddress: false
          #   associatePublicIPAddress: false
          #   deleteOnTermination: false
          #   description: ""
          #   deviceIndex: 0
          #   groups: []
          #   interfaceType: ""
          #   ipv4PrefixCount: 0
          #   ipv4Prefixes: []
          #   ipv6AddressCount: 0
          #   ipv6Addresses: []
          #   ipv6PrefixCount: 0
          #   ipv6Prefixes: []
          #   networkCardIndex: 0
          #   networkInterfaceID: ""
          #   privateIPAddress: ""
          #   privateIPAddresses: ""
          #   secondaryPrivateIPAddressCount: 0
          #   subnetID: ""
          # # Describes the placement of an instance.
          # placement:
          #   affinity: ""
          #   availabilityZone: ""
          #   groupName: ""
          #   hostID: ""
          #   hostResourceGroupARN: ""
          #   partitionNumber: 0
          #   spreadDomain: ""
          #   tenancy: ""
          # ramDiskID: ""
          # securityGroupIDs: []
          # securityGroups: []
          # tagSpecifications: []
          #   resourceType: ""
          #   tags: []
          # userData: ""
        region: us-west-2
        # The tags to apply to the launch template during creation.
        tagSpecification:
          - resourceType: ""
            tags: []
        tags:
          test-lt: test
        # # A description for the first version of the launch template.
        # versionDescription: ""

LaunchTemplateVersion:
  items:
    test:
      forProvider:
        sourceVersion: "1"
        launchTemplateNameRef:
          name: test-crossplane-obj
        launchTemplateData:
          # resourceTags
          tagSpecifications:
          - resourceType: volume
            tags:
            - key: version
              value: "2"

NATGateway:
  items:
    vpc:
      forProvider:
        allocationIdRef:
          name: 'test-nat-gateway'
        subnetIdRef:
          name: 'test-public-a'

Route:
  items:
    test:
      labels:
        crossplane.io/infra-resource: test
      forProvider:
        region: us-west-2
        routeTableIdRef:
          name: sample-routetable-ignore-routes
        destinationCIDRBlock: 172.16.0.0/12
        transitGatewayIdRef:
          name: tgw
        tags:
          test-rout: test

RouteTable:
  items:
    private:
      deletionPolicy: Delete
      forProvider:
        vpcIdRef:
          name: 'test-vpc'
        associations:
          - subnetIdRef:
              name: 'test-private-a'
          - subnetIdRef:
              name: 'test-private-b'
          - subnetIdRef:
              name: 'test-private-c'
        routes:
          - destinationCidrBlock: "0.0.0.0/0"
            natGatewayIdRef:
              name: 'test-vpc'
    public:
      deletionPolicy: Delete
      forProvider:
        vpcIdRef:
          name: 'test-vpc'
        associations:
          - subnetIdRef:
              name: 'test-public-a'
          - subnetIdRef:
              name: 'test-public-b'
          - subnetIdRef:
              name: 'test-public-c'
        routes:
          - destinationCidrBlock: "0.0.0.0/0"
            gatewayIdRef:
              name: 'test-vpc'

SecurityGroup:
  items:
    test:
      deletionPolicy: Delete
      forProvider:
        tags:
          test-sg: test
        description: "Security Group generated using crossplane + helm chart"
        # Region is the region you'd like your SecurityGroup to be created in.
        # global.awsRegion overrides this value
        region: us-west-2
        # VPCID is the ID of the VPC.
        # vpcId: {}
        # VPCIDRef reference a VPC to retrieve its vpcId
        # Name of the referenced object.
        vpcIdRef:
          name: test-vpc
        # vpcIdSelector:
        #   # MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
        #   matchControllerRef: 1
        #   # MatchLabels ensures an object with matching labels is selected.
        #   matchLabels:
        #     ec2.aws.crossplane.io/selector-name: test
        ingress:
            # The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number.
            # A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
          - fromPort: 80
            # The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
            toPort: 80
            # The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
            # [VPC only] Use -1 to specify all protocols.
            # When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify.
            # For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
            ipProtocol: "tcp"
            # The IPv4 ranges
            ipRanges:
              # The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
              - cidrIp: "10.0.0.0/8"
              # A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
                description: "CIDR IPv4 range/Security Group defined using crossplane + helm chart"
            # # The IPv6 ranges (VPC Only)
            # ipv6Ranges:
            #   # The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
            #   - cidrIPv6: "fddb:48c1:f920:a89f:0000:0000:0000:01/128" # local private IP address range
            #   # A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
            #     description: "CIDR IPv6 range/Security Group defined using crossplane + helm chart"
            # # PrefixListIDs for an AWS service. With outbound rules, this is the AWS service to access through a VPC endpoint from instances associated with the security group. [VPC only]
            # prefixListIds:
            #   # A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
            #   description: "Security group rule for prefix list ID generated using crossplane + helm chart"
            #   # The ID of the prefix.
            #   prefixListId: "1" # this is a string
            # # UserIDGroupPairs are the source security group and AWS account ID pairs. It contains one or more accounts and security groups to allow flows from security groups of other accounts.
            # userIdGroupPairs:
            #   # A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
            #   description: "Source security group and AWS account ID pair generated using crossplane + helm chart"
            #   # The ID of the security group.
            #   groupId: "groupid"
            #   # GroupIDRef reference a security group to retrieve its GroupID
            #   groupIdRef:
            #     # Name of the referenced object.
            #     name: "testSecurityGroupName"
            #   # GroupIDSelector selects reference to a security group to retrieve its GroupID
            #   groupIdSelector:
            #     # MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
            #     matchControllerRef: 1
            #     # MatchLabels ensures an object with matching labels is selected.
            #     matchLabels:
            #       ec2.aws.crossplane.io/selector-name: "test"
            #   # The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID. For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
            #   groupName: {}
            #   # The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
            #   userId: {}
            #   # The ID of the VPC for the referenced security group, if applicable.
            #   vpcId: {}
            #   # VPCIDRef reference a VPC to retrieve its vpcId
            #   vpcIdRef:
            #     # Name of the referenced object.
            #     name: "vpcId"
            #   # VPCIDSelector selects reference to a VPC to retrieve its vpcId
            #   vpcIdSelector:
            #     # MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
            #     matchControllerRef: 1
            #     # MatchLabels ensures an object with matching labels is selected.
            #     matchLabels:
            #       ec2.aws.crossplane.io/selector-name: "test"
            #   # The ID of the VPC peering connection, if applicable.
            #   vpcPeeringConnectionId:
            #     id: {}
        egress:
            # The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number.
            # A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
          - fromPort: 80
            # The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
            toPort: 80
            # The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
            # [VPC only] Use -1 to specify all protocols.
            # When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify.
            # For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
            ipProtocol: "tcp"
            # The IPv4 ranges
            ipRanges:
              # The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
              - cidrIp: "10.0.0.0/8"
              # A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
                description: "CIDR IPv4 range/Security Group defined using crossplane + helm chart"
            # # The IPv6 ranges (VPC Only)
            # ipv6Ranges:
            #   # The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
            #   - cidrIPv6: "fddb:48c1:f920:a89f:0000:0000:0000:01/128" # local private IP address range
            #   # A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
            #     description: "CIDR IPv6 range/Security Group defined using crossplane + helm chart"
            # # PrefixListIDs for an AWS service. With outbound rules, this is the AWS service to access through a VPC endpoint from instances associated with the security group. [VPC only]
            # prefixListIds:
            #   # A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
            #   description: "Security group rule for prefix list ID generated using crossplane + helm chart"
            #   # The ID of the prefix.
            #   prefixListId: "1" # this is a string
            # # UserIDGroupPairs are the source security group and AWS account ID pairs. It contains one or more accounts and security groups to allow flows from security groups of other accounts.
            # userIdGroupPairs:
            #   # A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
            #   description: "Source security group and AWS account ID pair generated using crossplane + helm chart"
            #   # The ID of the security group.
            #   groupId: "groupid"
            #   # GroupIDRef reference a security group to retrieve its GroupID
            #   groupIdRef:
            #     # Name of the referenced object.
            #     name: "testSecurityGroupName"
            #   # GroupIDSelector selects reference to a security group to retrieve its GroupID
            #   groupIdSelector:
            #     # MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
            #     matchControllerRef: 1
            #     # MatchLabels ensures an object with matching labels is selected.
            #     matchLabels:
            #       ec2.aws.crossplane.io/selector-name: "test"
            #   # The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID. For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
            #   groupName: {}
            #   # The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
            #   userId: {}
            #   # The ID of the VPC for the referenced security group, if applicable.
            #   vpcId: {}
            #   # VPCIDRef reference a VPC to retrieve its vpcId
            #   vpcIdRef:
            #     # Name of the referenced object.
            #     name: "vpcId"
            #   # VPCIDSelector selects reference to a VPC to retrieve its vpcId
            #   vpcIdSelector:
            #     # MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
            #     matchControllerRef: 1
            #     # MatchLabels ensures an object with matching labels is selected.
            #     matchLabels:
            #       ec2.aws.crossplane.io/selector-name: "test"
            #   # The ID of the VPC peering connection, if applicable.
            #   vpcPeeringConnectionId:
            #     id: {}

Subnet:
  tags:
    kubernetes.io/cluster/cluster-name: test-cluster
  items:
    public-a:
      deletionPolicy: Delete
      forProvider:
        availabilityZone: us-west-2a
        cidrBlock: 10.3.0.0/24
        mapPublicIPOnLaunch: true
        tags:
          "kubernetes.io/role/elb": "1"
    public-b:
      deletionPolicy: Delete
      forProvider:
        availabilityZone: us-west-2b
        cidrBlock: 10.3.1.0/24
        mapPublicIPOnLaunch: true
        tags:
          "kubernetes.io/role/elb": "1"
    public-c:
      deletionPolicy: Delete
      forProvider:
        availabilityZone: us-west-2c
        cidrBlock: 10.3.2.0/24
        mapPublicIPOnLaunch: true
        tags:
          "kubernetes.io/role/elb": "1"
    private-a:
      deletionPolicy: Delete
      labels:
        "app.kubernetes.io/private": "true"
      forProvider:
        availabilityZone: us-west-2a
        cidrBlock: 10.3.10.0/24
        mapPublicIPOnLaunch: false
        tags:
          "kubernetes.io/role/internal-elb": "1"
    private-b:
      deletionPolicy: Delete
      labels:
        "app.kubernetes.io/private": "true"
      forProvider:
        availabilityZone: us-west-2b
        cidrBlock: 10.3.11.0/24
        mapPublicIPOnLaunch: false
        tags:
          "kubernetes.io/role/internal-elb": "1"
    private-c:
      deletionPolicy: Delete
      labels:
        "app.kubernetes.io/private": "true"
      forProvider:
        availabilityZone: us-west-2c
        cidrBlock: 10.3.12.0/24
        mapPublicIPOnLaunch: false
        tags:
          "kubernetes.io/role/internal-elb": "1"

TransitGateway:
  items:
    test:
      forProvider:

TransitGatewayRoute:
  items:
    blackhole:
      forProvider:
        blackhole: true
        destinationCIDRBlock: 10.0.0.0/8
        transitGatewayRouteTableIdRef:
          name: tgw-routetable
    attack:
      forProvider:
        destinationCIDRBlock: 0.0.0.0/0
        transitGatewayAttachmentIdRef:
          name: tgw-vpc-attach
        transitGatewayRouteTableIdRef:
          name: tgw-routetable

TransitGatewayRouteTable:
  items:
    test:
      forProvider:
        transitGatewayIdRef:
          name: tgw

TransitGatewayVPCAttachment:
  items:
    test:
      forProvider:
        subnetIdRefs:
          - name: sample-subnet1
          - name: sample-subnet2
        transitGatewayIdRef:
          name: tgw
        vpcIdRef:
          name: sample-vpc
TransitGatewayVPCAttachmentAccepter:
  items:
    test:
      deletionPolicy: Delete
      providerConfigRef:
        name: aws-provider
      forProvider:
        transitGatewayAttachmentIdRef:
          name: "test"

Volume:
  items:
    test:
      forProvider:
        availabilityZone: us-east-1a
        encrypted: true
        kmsKeyIdRef:
          name: dev-key
        volumeType: gp3
        size: 1

VPC:
  items:
    vpc:
      deletionPolicy: Delete
      forProvider:
        cidrBlock: "10.3.0.0/16"
        enableDnsSupport: true
        enableDnsHostNames: true

VPCCIDRBlock:
  items:
    sample:
      forProvider:
        cidrBlock: 100.64.0.0/16
        vpcIdRef:
          name:  sample-vpc

VPCEndpoint:
  items:
    vpcendpoint:
      forProvider:
        privateDNSEnabled: true
        serviceName: com.amazonaws.us-east-1.appstream.streaming
        securityGroupIdRefs:
        - name: sample-cluster-sg
        subnetIdRefs:
        - name: sample-subnet1
        - name: sample-subnet2
        vpcEndpointType: Interface
        vpcIdRef:
          name: sample-vpc
    vpcendpoint-rtb:
      forProvider:
        routeTableIdRefs:
          - name: sample-routetable-ignore-routes
        serviceName: com.amazonaws.us-east-1.s3
        vpcEndpointType: Gateway
        vpcIdRef:
          name: sample-vpc

VPCEndpointServiceConfiguration:
  items:
    sample:
      forProvider:
        gatewayLoadBalancerARNRefs:
          - name: gatewayloadbalancer

VPCPeeringConnection:
  items:
    test:
      forProvider:
        # vpcID: vpc-123123123
        vpcIDRef:
          name: sample-vpc
        region: us-east-1
        peerVPCID: vpc-312312312
        # peerVPCIDRef:
        #   name: sample-vpc2
        acceptRequest: true
